{"version":3,"file":"static/js/35.f041d94b.chunk.js","mappings":"yRA+BA,EAxB0B,WACxB,IAAMA,GAAaC,EAAAA,EAAAA,GAAeC,EAAAA,IAC1BC,GAAOC,EAAAA,EAAAA,MAAPD,GAER,GAMIE,EAAAA,EAAAA,IAAyB,OAAFF,QAAE,IAAFA,EAAAA,EAAM,GAAI,CAAEG,MAAON,IALtCO,EAAe,EAArBC,KACYC,EAAwB,EAApCC,WACWC,EAAwB,EAAnCC,UACSC,EAAsB,EAA/BC,QACAC,EAAe,EAAfA,gBAOF,MAAO,CACLR,gBAAAA,EACAE,yBAAAA,EACAE,yBAAAA,EACAK,YAPCT,IACAQ,GAAmBF,GAA0BF,GAQlD,E,8GCPMM,EAAkBC,EAAAA,EAAAA,gBAAyB,CAC/CC,UAAW,SAACC,GAAO,MAAM,CACvBC,cAAeD,EAAQE,MAA4B,CACjDA,MAAO,SAACnB,GAAE,OACRoB,EAAAA,EAAAA,GAAgB,GAAD,OAAIC,EAAAA,EAAAA,QAAgB,OAAGrB,EAAE,YAAIqB,EAAAA,EAAAA,SAAqBC,EAAAA,EAAAA,IAAY,EAC/EC,eAAe,WAAD,8BAAE,WAAOC,EAAE,GAAD,kFAEW,OAFPC,EAAQ,EAARA,SAAUC,EAAc,EAAdA,eAAgBC,EAAQ,EAARA,SAAQ,SAElDC,EAA6BD,IAAyBE,OAAtDD,wBAAuB,SACzBF,EAAe,KAAD,EAChBE,GACFH,GAASK,EAAAA,EAAAA,KAAyB,IACnC,qDAEG,gBAAiBC,OAAK,qFAI7B,qDAZc,GAafC,kBAAmB,SAACC,GAAqB,OACvCA,EAAQC,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAEE,MAAQD,EAAEC,KAAK,GAAC,EAC3CC,aAAc,SAACC,GAAM,OACnBA,EAAM,kBACEA,EAAOC,KAAI,YAAM,MAAQ,CAAEC,KAAM,SAAmBzC,GAAnC,EAAH0C,IAA+C,KAAE,CAAE,WACrE,CAAC,SAAS,IAGlBC,aAAc1B,EAAQ2B,SAAqC,CACzDzB,MAAO,gBAAGnB,EAAE,EAAFA,GAAI6C,EAAI,EAAJA,KAAI,0BACbzB,EAAAA,EAAAA,GAAgB,GAAD,OAAIC,EAAAA,EAAAA,QAAgB,OAAGrB,EAAE,YAAIqB,EAAAA,EAAAA,SAAqBC,EAAAA,EAAAA,OAAa,IACjFuB,KAAAA,GAAI,EAENC,gBAAiB,CAAC,YAGpBC,iBAAkB9B,EAAQ2B,SAAiC,CACzDzB,MAAO,gBAAGuB,EAAG,EAAHA,IAAKM,EAAO,EAAPA,QAAO,OACpB5B,EAAAA,EAAAA,GAAgB,GAAD,OACVC,EAAAA,EAAAA,QAAgB,OAAG2B,EAAO,YAAI3B,EAAAA,EAAAA,SAAiB,OAAGqB,GACrDpB,EAAAA,EAAAA,OACD,EACHwB,gBAAiB,CAAC,YAGpBG,iBAAkBhC,EAAQ2B,SAAiC,CACzDzB,MAAO,gBAAGuB,EAAG,EAAHA,IAAKM,EAAO,EAAPA,QAAYH,GAAI,sCAC1BzB,EAAAA,EAAAA,GAAgB,GAAD,OACbC,EAAAA,EAAAA,QAAgB,OAAG2B,EAAO,YAAI3B,EAAAA,EAAAA,SAAiB,OAAGqB,GACrDpB,EAAAA,EAAAA,MACD,IACDuB,KAAAA,GAAI,EAENC,gBAAiB,CAAC,YAGpBI,kBAAmBjC,EAAQ2B,SAAsC,CAC/DzB,MAAO,SAAC0B,GAAI,0BACPzB,EAAAA,EAAAA,GAAgB,GAAD,OAAIC,EAAAA,EAAAA,YAAwBC,EAAAA,EAAAA,QAAc,IAC5DuB,KAAAA,GAAI,EAENC,gBAAiB,CAAC,YAGpBK,cAAelC,EAAQE,MAAkC,CACvDA,MAAO,gBAAGuB,EAAG,EAAHA,IAAKM,EAAO,EAAPA,QAAO,OACpB5B,EAAAA,EAAAA,GAAgB,GAAD,OACVC,EAAAA,EAAAA,QAAgB,OAAG2B,EAAO,YAAI3B,EAAAA,EAAAA,SAAiB,OAAGqB,GACrDpB,EAAAA,EAAAA,IACD,EACHgB,aAAc,CAAC,YAElB,IAIDc,EAMEtC,EANFsC,sBACAC,EAKEvC,EALFuC,wBACAC,EAIExC,EAJFwC,4BACAC,EAGEzC,EAHFyC,4BACAC,EAEE1C,EAFF0C,6B,GAEE1C,EADF2C,sB,QCjGIC,EAAqB,SAACC,GAAgB,OAAKA,EAAM9B,MAAO,EAExD+B,GAAoBC,EAAAA,EAAAA,IACxBH,GACA,SAACC,GAAK,OAAKA,EAAMG,cAAc,IAG3BC,GAA2BF,EAAAA,EAAAA,IAC/BH,GACA,SAACC,GAAK,OAAKA,EAAMK,uBAAuB,IAGpCC,GAA2BJ,EAAAA,EAAAA,IAC/BH,GACA,SAACC,GAAK,OAAKA,EAAM/B,uBAAuB,IAGpCV,GAAgB2C,EAAAA,EAAAA,IACpB,CDkFwB,SAACF,EAAkB3D,GAAU,OACrDc,EAAgBE,UAAUE,cAAcgD,OAAOlE,EAA/Cc,CAAmD6C,EAAO,ECnFtC,SAACA,EAAkB3D,GAAU,OAAKA,CAAE,IACxD,SAACuC,GAAM,aAAgB,QAAhB,EAAKA,EAAOlC,YAAI,QAAI,EAAE,IC+B/B,EA1CwB,SAAC4B,GACvB,IAAML,GAA0B9B,EAAAA,EAAAA,GAAemE,GACzCxC,GAAW0C,EAAAA,EAAAA,KACTnE,GAAOC,EAAAA,EAAAA,MAAPD,GACR,EAGIqD,IAAyB,eAF3BV,EAAY,YACCyB,EAAqB,EAAhCC,UAA6CC,EAAqB,EAAhC7D,UAGhC8D,GAA4CC,EAAAA,EAAAA,aAAW,yCAC3D,WAAOC,GAAU,0EACXzE,EAAG,CAAD,+BACE2C,EAAa,CACjB3C,GAAAA,EACA6C,MAAK,kBACA4B,GAAU,IACbpC,MAAOJ,EAAUA,EAAQyC,OAAS,MAEnC,KAAD,sCAEL,mDAX0D,GAY3D,CAAC9C,IAYH,OATA+C,EAAAA,EAAAA,YACE,kBAAM,WACA/C,GACFH,GAASK,EAAAA,EAAAA,KAAyB,GAEtC,CAAC,GACD,IAGK,CACLwC,sBAAAA,EACA1C,wBAAAA,EACAwC,sBAAAA,EACAG,SAAAA,EACAvE,GAAAA,EAEJ,ECTA,EAhCwB,WACtB,IAAM8D,GAAiBhE,EAAAA,EAAAA,GAAe8D,GAChCI,GAA0BlE,EAAAA,EAAAA,GAAeiE,GACzCtC,GAAW0C,EAAAA,EAAAA,KACjB,EACEb,IAA6B,eADxBP,EAAgB,KAAe6B,EAAqB,KAAhCP,UAGrBQ,GAAeL,EAAAA,EAAAA,cAAW,uBAAC,uFAC3BV,EAAe,CAAD,eAEkB,OADlCrC,GAASqD,EAAAA,EAAAA,KAAyB,IAClCrD,GAASsD,EAAAA,EAAAA,IAAkB,OAAO,SAC5BhC,EAAiBe,GAAgB,KAAD,sCAEvC,CAACA,IAYJ,OAVAa,EAAAA,EAAAA,YACE,kBAAM,WACAX,IACFvC,GAASqD,EAAAA,EAAAA,KAAyB,IAClCrD,GAASsD,EAAAA,EAAAA,IAAkB,OAE/B,CAAC,GACD,IAGK,CACLH,sBAAAA,EACAZ,wBAAAA,EACAa,aAAAA,EAEJ,ECPA,EAvByB,WACvB,IAAQ7E,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAoCgF,EAAAA,EAAAA,UAAuB,IAAG,eAAvDC,EAAU,KAAEC,EAAa,KAC1BrF,GAAaC,EAAAA,EAAAA,GAAeC,EAAAA,IAC5BkC,GAAUnC,EAAAA,EAAAA,IAAe,SAAC6D,GAAgB,OAAKzC,EAAcyC,EAAS,OAAF3D,QAAE,IAAFA,EAAAA,EAAM,GAAG,IACnF,EACEoD,EAAwB,OAAFpD,QAAE,IAAFA,EAAAA,EAAM,GAAI,CAAEG,MAAON,IADvBsF,EAAmB,EAA/B5E,WAA4C6E,EAAsB,EAAjC3E,UASzC,OANAkE,EAAAA,EAAAA,YAAU,WACJ1C,GACFiD,EAAcjD,EAElB,GAAG,CAACA,IAEG,CACLA,QAAAA,EACAgD,WAAAA,EACAE,oBAAAA,EACAC,uBAAAA,EACAF,cAAAA,EAEJ,ECTA,EAjB2B,WACzB,MACE3B,IAA6B,eADxBN,EAAgB,KAAeoC,EAAwB,KAAnChB,UAGrBiB,GAAkBd,EAAAA,EAAAA,aAAW,yCAAC,WAAOe,EAAe1D,GAAkB,sFACpEoB,GAAiB,kBAClBpB,GAAM,IACT0D,MAAAA,KACC,KAAD,sCACH,qDALkC,GAKhC,IAEH,MAAO,CACLF,yBAAAA,EACAC,gBAAAA,EAEJ,E,mBCIME,EAAgBzE,EAAAA,EAAAA,gBAAyB,CAC7CC,UAAW,SAACC,GAAO,MAAM,CACvBwE,YAAaxE,EAAQE,MAA0B,CAC7CA,MAAO,gBAAG6B,EAAO,EAAPA,QAAS0C,EAAQ,EAARA,SAAQ,OACzBtE,EAAAA,EAAAA,GAAgB,GAAD,OACVC,EAAAA,EAAAA,QAAgB,OAAG2B,EAAO,YAAI3B,EAAAA,EAAAA,SAAiB,OAAGqE,EAAQ,YAAIrE,EAAAA,EAAAA,OACjEC,EAAAA,EAAAA,IACD,EACHU,kBAAmB,SAAC2D,GAAiB,OACnCA,EACGnD,KAAI,SAACnC,GAAI,yBACLA,GACAuF,KAAKC,MAAMxF,EAAKyF,aAAY,IAEhC5D,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAEE,MAAQD,EAAEC,KAAK,GAAC,EACtCd,eAAe,WAAD,8BAAE,WAAOC,EAAE,GAAD,sFAG8B,OAH1BC,EAAQ,EAARA,SAAUC,EAAc,EAAdA,eAAgBC,EAAQ,EAARA,SAAQ,SAE1DF,GAASsE,EAAAA,EAAAA,KAAsB,IAAO,EACkBpE,IACrDqE,KADKC,EAAmB,EAAnBA,oBAAqBC,EAAqB,EAArBA,sBAAqB,SAE5CxE,EAAe,KAAD,EACpBD,GAASsE,EAAAA,EAAAA,KAAsB,IAC3BG,EACFzE,GAAS0E,EAAAA,EAAAA,KAAuB,IACvBF,GACTxE,GAAS2E,EAAAA,EAAAA,KAAqB,IAC/B,uDAEG,gBAAiBrE,OAAK,sFAI7B,qDAjBc,GAkBfO,aAAc,SAACC,GAAM,OACnBA,EAAM,kBACEA,EAAOC,KAAI,YAAM,MAAQ,CAAEC,KAAM,OAAiBzC,GAAjC,EAAH0C,IAA6C,KAAE,CAAE,SACnE,CAAC,OAAO,IAGhB2D,WAAYpF,EAAQ2B,SAAkD,CACpEzB,MAAO,gBAAG6B,EAAO,EAAPA,QAAS0C,EAAQ,EAARA,SAAU7C,EAAI,EAAJA,KAAI,0BAC5BzB,EAAAA,EAAAA,GAAgB,GAAD,OACbC,EAAAA,EAAAA,QAAgB,OAAG2B,EAAO,YAAI3B,EAAAA,EAAAA,SAAiB,OAAGqE,EAAQ,YAAIrE,EAAAA,EAAAA,OACjEC,EAAAA,EAAAA,OACD,IACDuB,KAAAA,GAAI,EAENC,gBAAiB,CAAC,UAGpBwD,WAAYrF,EAAQ2B,SAAsC,CACxDzB,MAAO,gBAAG6B,EAAO,EAAPA,QAAS0C,EAAQ,EAARA,SAAU1F,EAAE,EAAFA,GAAI6C,EAAI,EAAJA,KAAI,0BAChCzB,EAAAA,EAAAA,GAAgB,GAAD,OACbC,EAAAA,EAAAA,QAAgB,OAAG2B,EAAO,YAAI3B,EAAAA,EAAAA,SAAiB,OAAGqE,EAAQ,YAAIrE,EAAAA,EAAAA,OAAe,OAAGrB,GACnFsB,EAAAA,EAAAA,MACD,IACDuB,MAAK,kBACAA,GAAI,IACP6C,SAAAA,KACD,EAEH5C,gBAAiB,CAAC,UAGpByD,gBAAiBtF,EAAQ2B,SAAkC,CACzDzB,MAAO,SAAC0B,GAAI,0BACPzB,EAAAA,EAAAA,GAAgB,GAAD,OAAIC,EAAAA,EAAAA,UAAsBC,EAAAA,EAAAA,QAAc,IAC1DuB,KAAAA,GAAI,EAENC,gBAAiB,CAAC,UAGpB0D,WAAYvF,EAAQ2B,SAAoD,CACtEzB,MAAO,gBAAG6B,EAAO,EAAPA,QAAS0C,EAAQ,EAARA,SAAU1F,EAAE,EAAFA,GAAE,kBAC1BoB,EAAAA,EAAAA,GAAgB,GAAD,OACbC,EAAAA,EAAAA,QAAgB,OAAG2B,EAAO,YAAI3B,EAAAA,EAAAA,SAAiB,OAAGqE,EAAQ,YAAIrE,EAAAA,EAAAA,OAAe,OAAGrB,GACnFsB,EAAAA,EAAAA,QACD,EAEHwB,gBAAiB,CAAC,UAErB,IAID2D,EAKEjB,EALFiB,oBACAC,EAIElB,EAJFkB,sBACAC,GAGEnB,EAHFmB,sBACAC,GAEEpB,EAFFoB,2BACAC,GACErB,EADFqB,sBC5GIC,GAAmB,SAACnD,GAAgB,OAAKA,EAAMqC,IAAK,EAEpDe,IAAkBlD,EAAAA,EAAAA,IAAeiD,IAAkB,SAACnD,GAAK,OAAKA,EAAMqD,YAAY,IAEhFC,IAAyBpD,EAAAA,EAAAA,IAC7BiD,IACA,SAACnD,GAAK,OAAKA,EAAMuC,qBAAqB,IAGlCgB,IAAyBrD,EAAAA,EAAAA,IAC7BiD,IACA,SAACnD,GAAK,OAAKA,EAAMwD,qBAAqB,IAGlCC,IAAuBvD,EAAAA,EAAAA,IAC3BiD,IACA,SAACnD,GAAK,OAAKA,EAAMsC,mBAAmB,IAGhCoB,IAAsBxD,EAAAA,EAAAA,IAC1BiD,IACA,SAACnD,GAAK,OAAKA,EAAM2D,oBAAoB,IAGjC7B,IAAc5B,EAAAA,EAAAA,IAClB,CDsFsB,SAACF,EAAkBxC,GAAiB,OAC1DqE,EAAcxE,UAAUyE,YAAYvB,OAAO/C,EAA3CqE,CAAkD7B,EAAO,ECvFvC,SAACA,EAAkBxC,GAAiB,OAAKA,CAAK,IAChE,SAACoB,GAAM,aAAgB,QAAhB,EAAKA,EAAOlC,YAAI,QAAI,EAAE,I,+EC+B/B,GAjDsB,SAACkH,GACrB,IAAMrB,GAAwBpG,EAAAA,EAAAA,GAAemH,IACvCO,GAAW1H,EAAAA,EAAAA,GAAe2H,EAAAA,IAC1B3D,GAAiBhE,EAAAA,EAAAA,GAAe8D,GAChCnC,GAAW0C,EAAAA,EAAAA,KACjB,EAAyDuC,IAAuB,eAAzEL,EAAU,KAAeqB,EAAmB,KAA9BrD,UAEfsD,GAAsBnD,EAAAA,EAAAA,cAAY,SAAC3C,GACvCJ,GAASsD,EAAAA,EAAAA,IAAkBlD,IAC3BJ,GAAS0E,EAAAA,EAAAA,KAAuB,GAClC,GAAG,IAEGyB,GAAoDpD,EAAAA,EAAAA,aAAW,yCACnE,8FAA6B,GAApBe,EAAK,EAALA,MAAUd,GAAU,cACvBX,EAAe,CAAD,+BACVuC,EAAW,CACfrD,QAASc,EAAed,QACxB0C,SAAU5B,EAAepB,IACzBG,KAAM,CACJ0C,MAAAA,EACAO,YAAaF,KAAKiC,WAAU,UAAKpD,IACjCqD,OAAqB,QAAf,EAAU,OAARN,QAAQ,IAARA,OAAQ,EAARA,EAAU9E,WAAG,QAAI,GACzBqF,MAAO,CAACtD,EAAWuD,iBACnB3F,MAAOkF,EAASzD,EAAepB,KAAO6E,EAASzD,EAAepB,KAAKgC,OAAS,KAE7E,KAAD,sCAEL,mDAfkE,GAgBnE,CAACwB,IAaH,OAVAvB,EAAAA,EAAAA,YACE,kBAAM,WACAuB,IACFzE,GAAS0E,EAAAA,EAAAA,KAAuB,IAChC1E,GAASwG,EAAAA,EAAAA,IAAgB,OAE7B,CAAC,GACD,IAGK,CACL/B,sBAAAA,EACAwB,oBAAAA,EACAE,mBAAAA,EACAD,oBAAAA,EAEJ,ECJA,GA/CsB,SAACX,GACrB,IAAMG,GAAwBrH,EAAAA,EAAAA,GAAeoH,IAC7C,EAA6DL,KAAuB,eAA7EqB,EAAc,KAAeC,EAAmB,KAA9B9D,UACnB5C,GAAW0C,EAAAA,EAAAA,KAEXiE,GAAyB5D,EAAAA,EAAAA,cAC7B,SAAC6D,EAAwDrC,GACvDqC,EAAMC,kBACN7G,GAASwG,EAAAA,EAAAA,IAAgBjC,IACzBvE,GAAS8G,EAAAA,EAAAA,KAAuB,GAClC,GACA,IAGI/B,GAAahC,EAAAA,EAAAA,cAAW,uBAAC,+FACzBwC,EAAa,CAAD,eAGkB,OAFxBhE,EAAsBgE,EAAtBhE,QAAS0C,EAAasB,EAAbtB,SACjBjE,GAAS8G,EAAAA,EAAAA,KAAuB,IAChC9G,GAASwG,EAAAA,EAAAA,IAAgB,OAAO,SAC1BC,EAAe,CAAElF,QAAAA,EAAS0C,SAAAA,EAAU1F,GAAIgH,EAAatE,MAAO,KAAD,sCAElE,CAACsE,IAkBJ,OAhBArC,EAAAA,EAAAA,YAAU,YACHwC,GAAyBH,GAC5BvF,GAASwG,EAAAA,EAAAA,IAAgB,MAE7B,GAAG,CAACd,KAEJxC,EAAAA,EAAAA,YACE,kBAAM,WACAwC,IACF1F,GAAS8G,EAAAA,EAAAA,KAAuB,IAChC9G,GAASwG,EAAAA,EAAAA,IAAgB,OAE7B,CAAC,GACD,IAGK,CACLd,sBAAAA,EACAgB,oBAAAA,EACAC,uBAAAA,EACA5B,WAAAA,EAEJ,ECMA,GAnDoB,SAACQ,GACnB,IAAMf,GAAsBnG,EAAAA,EAAAA,GAAesH,IAC3C,EAAqDT,KAAuB,eAArE6B,EAAQ,KAAeC,EAAiB,KAA5BpE,UACb5C,GAAW0C,EAAAA,EAAAA,KAEXuE,GAAuBlE,EAAAA,EAAAA,cAAY,SAACwB,GACxCvE,GAASwG,EAAAA,EAAAA,IAAgBjC,IACzBvE,GAAS2E,EAAAA,EAAAA,KAAqB,GAChC,GAAG,IAEGuC,GAAkDnE,EAAAA,EAAAA,aAAW,yCACjE,wGAAmD,GAA1Ce,EAAK,EAALA,MAAOqD,EAAK,EAALA,MAAO9C,EAAW,EAAXA,YAAakC,EAAe,EAAfA,iBAC9BhB,EAAa,CAAD,eAGkB,OAFxBhE,EAAqCgE,EAArChE,QAAS0C,EAA4BsB,EAA5BtB,SAAUoC,EAAkBd,EAAlBc,OAAQzF,EAAU2E,EAAV3E,MACnCZ,GAAS2E,EAAAA,EAAAA,KAAqB,IAC9B3E,GAASwG,EAAAA,EAAAA,IAAgB,OAAO,SAC1BO,EAAS,CACbxF,QAAAA,EACA0C,SAAAA,EACA1F,GAAIgH,EAAatE,IACjBG,KAAM,CACJ0C,MAAAA,EACAO,YAAaF,KAAKiC,UAAU,CAAEe,MAAAA,EAAO9C,YAAAA,IACrCgC,OAAAA,EACAC,MAAO,CAACC,GACR3F,MAAAA,KAED,KAAD,sCAEL,mDAnBgE,GAoBjE,CAAC2E,IAaH,OAVArC,EAAAA,EAAAA,YACE,kBAAM,WACAsB,IACFxE,GAAS2E,EAAAA,EAAAA,KAAqB,IAC9B3E,GAASwG,EAAAA,EAAAA,IAAgB,OAE7B,CAAC,GACD,IAGK,CACLhC,oBAAAA,EACAwC,kBAAAA,EACAC,qBAAAA,EACAC,iBAAAA,EAEJ,E,WCuCA,GA3FuB,SACrB1D,EACAC,EACAqC,EACAsB,GAEA,MAA4BrF,IAArBN,GAAmD,YAAlC,GACxB,EAA0B0D,KAAnBL,GAA+C,YAAhC,GA+EtB,MAAO,CACLuC,UA9EgB,SAAH,GAAmD,IAA7CC,EAAW,EAAXA,YAAaC,EAAM,EAANA,OAAQvG,EAAI,EAAJA,KACxC,GAAKsG,EAAL,CAIA,GAAa,WAATtG,EAAmB,CACrB,IACa,OAAXsG,QAAW,IAAXA,OAAW,EAAXA,EAAaE,eAAgBD,EAAOC,aACpCF,EAAYG,QAAUF,EAAOE,MAE7B,OAEF,IAAMjH,GAAO,OAAOgD,GACpB,EAA0BhD,EAAQkH,OAAOH,EAAOE,MAAO,GAAhDE,GAAkD,YAAnC,GACtBnH,EAAQkH,OAAOJ,EAAYG,MAAO,EAAGE,GAErClE,EAAcjD,GACdiB,EACEjB,EAAQO,KAAI,WAAU0G,GAAJ,MAAe,CAC/BxG,IADgB,EAAHA,IAEbL,MAAO6G,EACR,IAEL,CAEA,GAAa,SAATzG,EAAiB,CACnB,IAAM4G,GAAW,OAAO9B,EAASyB,EAAOC,cAClCK,GAAgB,OAAO/B,EAASwB,EAAYE,cAElD,GAAID,EAAOC,cAAgBF,EAAYE,YAAa,CAClD,MAAwBI,EAAYF,OAAOH,EAAOE,MAAO,GAAlDK,GAAoD,YAAvC,GACpBD,EAAiBH,OAAOJ,EAAYG,MAAO,EAAGK,GAE9CV,GAAY,SAACW,GAAI,+BACZA,GAAI,oBACNR,EAAOC,YAAcI,IAAW,UAChCN,EAAYE,aAAW,OACnBK,EAAiB9G,KAAI,SAACiH,GAAI,yBACxBA,GAAI,IACP/D,SAAUqD,EAAYE,aAAW,MAChC,OAIP1C,EAAgB,GAAD,eACV8C,EAAY7G,KAAI,WAAoB0G,GAAJ,MAAe,CAChDxG,IADuB,EAAHA,IAEpBgD,SAFiC,EAARA,SAGzBrD,MAAO6G,EACR,MAAE,OACAI,EAAiB9G,KAAI,WAAU0G,GAAJ,MAAe,CAC3CxG,IAD4B,EAAHA,IAEzBL,MAAO6G,EACPxD,SAAUqD,EAAYE,YACvB,MAEL,KAAO,CACL,IAAMS,GAAiB,OAAOL,GAC9B,EAAsBK,EAAkBP,OAAOH,EAAOE,MAAO,GAAtDS,GAAwD,YAA7C,GAClBD,EAAkBP,OAAOJ,EAAYG,MAAO,EAAGS,GAE/Cd,GAAY,SAACW,GAAI,yBACZA,GAAI,eACNR,EAAOC,YAAcS,GAAiB,IAGzCnD,EACEmD,EAAkBlH,KAAI,WAAoB0G,GAAJ,MAAe,CACnDxG,IAD0B,EAAHA,IAEvBgD,SAFoC,EAARA,SAG5BrD,MAAO6G,EACR,IAEL,CACF,CAvEA,CAwEF,EAKF,E,gCC1FMU,GAAgBC,GAAAA,GAAAA,IAAU,yiBAaR,YAAQ,SAALC,MAAkBC,OAAOC,cAAc,IAI1C,YAAQ,SAALF,MAAkBC,OAAOE,eAAe,IAO3C,YAAQ,SAALH,MAAkBC,OAAOE,eAAe,IAQ7DC,GAAkBL,GAAAA,GAAAA,IAAU,6eAY5B,gBAAGM,EAAW,EAAXA,YAAaL,EAAK,EAALA,MAAK,OACrBK,EAAcL,EAAMC,OAAOK,aAAeN,EAAMC,OAAOM,IAAI,IAE3C,YAAQ,SAALP,MAAkBC,OAAOE,eAAe,IA2B3DK,IAfeT,GAAAA,GAAAA,IAAU,yJASXA,GAAAA,GAAAA,GAAS,sFACd,YAAQ,SAALC,MAAkBS,UAAUC,EAAE,IAC/B,YAAQ,SAALV,MAAkBW,MAAMlF,KAAK,IAI5BsE,GAAAA,GAAAA,IAAU,+eAUP,YAAQ,SAALC,MAAkBC,OAAOE,eAAe,IAK3C,YAAQ,SAALH,MAAkBC,OAAOE,eAAe,IAM3C,YAAQ,SAALH,MAAkBC,OAAOE,eAAe,KC7DnE,GA7BuB,SACrBjH,EACA0C,EACAmD,GAEA,IAAMhJ,GAAaC,EAAAA,EAAAA,GAAeC,EAAAA,IACf2K,EAAyBjE,EAC1C,CAAEzD,QAAAA,EAAS0C,SAAAA,GACX,CAAEvF,MAAON,IAFHY,UAIFkF,GAAQ7F,EAAAA,EAAAA,IAAe,SAAC6D,GAAgB,OAC5C8B,GAAY9B,EAAO,CAAEX,QAAAA,EAAS0C,SAAAA,GAAW,IAY3C,OATAf,EAAAA,EAAAA,YAAU,WACJgB,GAAS+E,GACX7B,GAAY,SAACW,GAAI,yBACZA,GAAI,eACN9D,EAAWC,GAAK,GAGvB,GAAG,CAACA,EAAO+E,IAEJ,CACL/E,MAAAA,EACA+E,qBAAAA,EAEJ,E,4CCjCMC,GAAkBd,GAAAA,GAAAA,IAAU,2DAK5Be,GAAiBf,GAAAA,GAAAA,GAAS,iPACjB,YAAQ,SAALC,MAAkBS,UAAUC,EAAE,IAC/B,YAAQ,SAALV,MAAkBW,MAAMI,IAAI,IAC/B,YAAQ,SAALf,MAAkBgB,YAAYC,IAAI,IAWhDC,GAAOnB,GAAAA,GAAAA,KAAW,0PAapBoB,GAAAA,IAKEC,GAAoBrB,GAAAA,GAAAA,IAAU,kGAM9BsB,GAActB,GAAAA,GAAAA,IAAU,oHAI1BuB,GAAAA,GAMEC,GAAkBxB,GAAAA,GAAAA,IAAU,0L,iCCvClC,SAASyB,GAAa,GAAkE,IAAhE7B,EAAI,EAAJA,KAAM8B,EAAwB,EAAxBA,yBAA0BC,EAAQ,EAARA,SACtD,GAAoBC,EAAAA,EAAAA,GAAe,eAA3BC,EAAC,EAADA,EAAGC,EAAI,EAAJA,KACX,GAOIC,EAAAA,GAAAA,IAA2B,CAC7BC,KAAM,WACNC,eAAgB,WAChBC,cAAe,CAAExG,MAAOkE,EAAKlE,SAT7ByG,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACAC,EAAW,EAAXA,YACAC,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACaC,EAAM,EAAnBC,UAAaD,OAiBf,OAVA1H,EAAAA,EAAAA,YAAU,WACJ0H,GACFF,EAAQ,CAAC,SAEb,GAAG,CAACR,EAAKY,YAET5H,EAAAA,EAAAA,YAAU,WACRyH,EAAS,QACX,GAAG,KAGD,WAACpB,GAAI,CACH,aAAW,OACXwB,YAAU,EACVC,aAAa,MACblI,SAAU0H,GAAa,gBAAG1G,EAAK,EAALA,MAAK,OAAOiG,EAASjG,EAAOkE,EAAK,IAAE,WAE7D,UAACiD,GAAA,EAAK,CACJjK,KAAK,OACLkK,KAAK,QACLN,OAAQA,EAAO9G,MACfyG,SAAUA,EACVE,YAAaA,EACbU,UAAW,CACTC,MAAO,EACPC,QAASpB,EAAE,4BAEbqB,UAAW,CACTF,MAAO,GACPC,QAASpB,EAAE,4BAEbsB,SAAUtB,EAAE,wBAEd,UAACuB,GAAA,EAAM,CACLxK,KAAK,SACLyK,MAAM,OACNC,gBAAiBC,GAAAA,EAAAA,OAAAA,YAAgC,UAEjD,UAAC,MAAiB,OAEpB,UAACH,GAAA,EAAM,CACLxK,KAAK,SACLyK,MAAM,OACNC,gBAAiBC,GAAAA,EAAAA,OAAAA,YACjBC,SAAU9B,EAAyB,UAEnC,UAAC,MAAe,QAIxB,CAEA,QAAe+B,EAAAA,EAAAA,MAAKhC,ICDpB,I,iCAAA,GA3DA,SAAkB,GAMC,IALjB7B,EAAI,EAAJA,KACAhJ,EAAS,EAATA,UACA4D,EAAS,EAATA,UACAkJ,EAAiB,EAAjBA,kBACA/B,EAAQ,EAARA,SAEA,GAAwCxG,EAAAA,EAAAA,WAAS,GAAM,eAAhDwI,EAAa,KAAEC,EAAc,KAE9BlC,GAA2B/G,EAAAA,EAAAA,cAAY,WAC3CiJ,GAAe,SAACjE,GAAI,OAAMA,CAAI,GAChC,GAAG,CAACgE,IAQJ,OANA7I,EAAAA,EAAAA,YAAU,WACJlE,IAAc4D,GAChBoJ,GAAe,EAEnB,GAAG,CAAChN,EAAW4D,KAGb,UAAC6G,GAAiB,UACfsC,GACC,UAAC,GAAY,CACX/D,KAAMA,EACN8B,yBAA0BA,EAC1BC,SAAUA,KAGZ,UAACH,GAAe,WACd,WAACV,GAAe,YACd,WAACQ,GAAW,YACV,UAACP,GAAc,CAAC8C,QAASnC,EAAyB,SAC/C9B,EAAKlE,SAER,UAAC0H,GAAA,EAAM,CACLxK,KAAK,SACLyK,MAAM,OACNC,gBAAiBC,GAAAA,EAAAA,OAAAA,YACjBC,SAAU9B,EAAyB,UAEnC,UAAC,MAAkB,UAGvB,UAAC0B,GAAA,EAAM,CACLxK,KAAK,SACLyK,MAAM,OACNC,gBAAiBC,GAAAA,EAAAA,OAAAA,YACjBxE,MAAOwE,GAAAA,EAAAA,OAAAA,KACPC,SAAU,kBAAME,EAAkB9D,EAAK,EAAC,UAExC,UAAC,MAAgB,YAO/B,E,SC/CMkE,IA9Be9D,GAAAA,GAAAA,IAAU,wgBAWP,YAAQ,SAALC,MAAkBC,OAAOE,eAAe,IAK3C,YAAQ,SAALH,MAAkBC,OAAOE,eAAe,IAM3C,YAAQ,SAALH,MAAkBC,OAAOE,eAAe,IAQhDJ,GAAAA,GAAAA,IAAU,sSAQP,gBAAG+D,EAAgB,EAAhBA,iBAAkB9D,EAAK,EAALA,MAAK,OAC5B,OAAhB8D,QAAgB,IAAhBA,EAAAA,EAAoB9D,EAAMC,OAAOK,YAAY,IACjC,YAAQ,SAALN,MAAkB+D,QAAQC,UAAU,KASjDC,GAAalE,GAAAA,GAAAA,IAAU,8JAKb,YAAQ,SAALC,MAAkB+D,QAAQC,UAAU,IAIjDE,GAAanE,GAAAA,GAAAA,OAAAA,MAAoB,CACrCpH,KAAM,UADWoH,CAEjB,wSACoB,YAAQ,SAALC,MAAkBC,OAAOkE,WAAW,IAI7C,YAAQ,SAALnE,MAAkB+D,QAAQC,UAAU,IAIxC,YAAQ,SAALhE,MAAkB+D,QAAQK,YAAY,IAIzC,YAAQ,SAALpE,MAAkB+D,QAAQM,aAAa,IASnDC,GAAYvE,GAAAA,GAAAA,GAAS,mRACZ,YAAQ,SAALC,MAAkBS,UAAUM,IAAI,IACjC,YAAQ,SAALf,MAAkBW,MAAMlF,KAAK,IAKjC,YAAQ,SAALuE,MAAkB+D,QAAQC,UAAU,IAI1C,YAAQ,SAALhE,MAAkBC,OAAOE,eAAe,IAKlDoE,GAAyBxE,GAAAA,GAAAA,IAAU,6CAInCyE,GAAkBzE,GAAAA,GAAAA,EAAQ,0IACjB,YAAQ,SAALC,MAAkBS,UAAUgE,SAAS,IAOjDC,IAAmB3E,EAAAA,GAAAA,IAAO4E,GAAAA,IAAP5E,CAAe,0CAC7B,YAAQ,SAALC,MAAkBC,OAAOE,eAAe,IAGhDyE,GAAyB7E,GAAAA,GAAAA,IAAU,8FAC1B,YAAQ,SAALC,MAAkBS,UAAUoE,aAAa,IAKrDC,GAAkB/E,GAAAA,GAAAA,EAAQ,iEAErB,YAAQ,SAALC,MAAkBC,OAAOM,IAAI,IAGrCwE,GAAsBhF,GAAAA,GAAAA,KAAW,8IAEjB,YAAQ,SAALC,MAAkBC,OAAOE,eAAe,IAGtD,YAAQ,SAALH,MAAkBC,OAAOc,IAAI,IC3G3C,SAASiE,GAAS,GAKE,IAJlB9I,EAAI,EAAJA,KACA+I,EAAS,EAATA,UACArG,EAAoB,EAApBA,qBACAN,EAAsB,EAAtBA,uBAEQsD,GAAMD,EAAAA,EAAAA,GAAe,cAAe,CAAEuD,UAAW,SAAjDtD,EAER,OACE,UAAC,MAAS,CAACuD,YAAajJ,EAAKtD,IAAKwG,MAAO6F,EAAU,SAChD,SAACG,GAAY,OACZ,WAACvB,IAAU,wBAETC,iBAAkB5H,EAAK4C,MACvBuG,IAAKD,EAAaE,UACdF,EAAaG,gBACbH,EAAaI,iBAAe,eAEhC,WAACvB,GAAU,YACT,UAACK,GAAS,CAACV,QAAS,kBAAMhF,EAAqB1C,EAAK,EAAC,SAAEA,EAAKT,SAC5D,UAACyI,GAAU,CAACN,QAAS,SAACrF,GAAK,OAAKD,EAAuBC,EAAOrC,EAAK,EAAC,UAClE,UAACwI,GAAgB,UAGrB,UAACH,GAAsB,WACrB,UAACC,GAAe,UAAEtI,EAAKF,gBAExBE,EAAK+B,MAAM,KACV,UAAC2G,GAAsB,WACrB,WAACE,GAAe,WACblD,EAAE,gBACH,WAACmD,GAAmB,eAAG7I,EAAK+B,MAAM,GAAE,eAnBrC/B,EAAKtD,IAuBC,GAIrB,CAEA,QAAe4K,EAAAA,EAAAA,MAAKwB,ICtCpB,SAASS,GAAO,GAYC,IAXf1N,EAAM,EAANA,OACA2N,EAAW,EAAXA,YACApK,EAAsB,EAAtBA,uBACAD,EAAmB,EAAnBA,oBACAoC,EAAQ,EAARA,SACAsB,EAAW,EAAXA,YACAlB,EAAmB,EAAnBA,oBACArC,EAAe,EAAfA,gBACAmK,EAAmB,EAAnBA,oBACA/G,EAAoB,EAApBA,qBACAN,EAAsB,EAAtBA,uBAEQsD,GAAMD,EAAAA,EAAAA,GAAe,cAAe,CAAEuD,UAAW,oBAAjDtD,EAGR,OAFAgE,GAAe7N,EAAOmB,QAASnB,EAAOa,IAAKmG,IAGzC,UAAC,MAAS,CAACoG,YAAapN,EAAOa,IAAKwG,MAAOsG,EAAY,SACpD,SAACN,EAAcS,GAAQ,OACtB,WAACzF,IAAe,wBACdiF,IAAKD,EAAaE,UACdF,EAAaG,gBACbH,EAAaI,iBAAe,IAChCnF,YAAawF,EAASC,WACtBC,OAAK,kBACAX,EAAaG,eAAeQ,OAAK,IACpCC,OAAQ,YACR,WAEF,UAAC,GAAQ,CACPrG,KAAM5H,EACNpB,UAAW2E,EACXf,UAAWc,EACXoI,kBAAmBkC,EACnBjE,SAAUlG,KAEZ,UAAC,MAAS,CAAC2D,YAAapH,EAAOa,IAAKqN,UAAU,WAAWtN,KAAK,OAAM,SACjE,SAACuN,GAAY,OACZ,WAAC1F,IAAY,gBAAC6E,IAAKa,EAAaZ,UAAcY,EAAaC,gBAAc,cACtE1I,EAAS1F,EAAOa,MACf6E,EAAS1F,EAAOa,KAAKF,KAAI,SAACwD,EAAMkD,GAAK,OACnC,UAAC,GAAQ,CAEPlD,KAAMA,EACN+I,UAAW7F,EACXR,qBAAsBA,EACtBN,uBAAwBA,GAJnBpC,EAAKtD,IAKV,IAELsN,EAAaE,eACD,KAGnB,UAACjD,GAAA,EAAM,CACLxK,KAAK,SACL0K,gBAAiBC,GAAAA,EAAAA,OAAAA,YACjBxE,MAAOwE,GAAAA,EAAAA,OAAAA,KACPC,SAAU,kBAAM1F,EAAoB9F,EAAO,EAAC,qBAEtC6J,EAAE,uBAEM,GAI1B,CAEA,QAAe4B,EAAAA,EAAAA,MAAKiC,ICrEpB,SAASY,KACP,IAAMnJ,GAAelH,EAAAA,EAAAA,GAAeiH,IACpC,GAAgC/B,EAAAA,EAAAA,UAAmB,CAAC,GAAE,eAA/CuC,EAAQ,KAAEsB,EAAW,KACtBpH,GAAW0C,EAAAA,EAAAA,KACjB,EACEiM,IADMnL,EAAU,EAAVA,WAAYG,EAAsB,EAAtBA,uBAAwBD,EAAmB,EAAnBA,oBAAqBD,EAAa,EAAbA,cAEzDI,EAAoB+K,IAApB/K,gBACR,EAKIgL,GAAc/I,GAJhBrB,EAAqB,EAArBA,sBACAwB,EAAmB,EAAnBA,oBACAE,EAAkB,EAAlBA,mBACAD,EAAmB,EAAnBA,oBAEF,EAKI4I,GAAYvJ,GAJdf,EAAmB,EAAnBA,oBACAwC,EAAiB,EAAjBA,kBACAE,EAAgB,EAAhBA,iBACAD,EAAoB,EAApBA,qBAEF,EAKI8H,GAAcxJ,GAJhBG,EAAqB,EAArBA,sBACAgB,EAAmB,EAAnBA,oBACA3B,EAAU,EAAVA,WACA4B,EAAsB,EAAtBA,uBAEIqI,EAAmB,CACvBtL,EACAuC,EACAe,EACAN,GACAuI,MAAK,SAACC,GAAM,OAAKA,CAAM,IACjB7H,EAAc8H,GAAe3L,EAAYC,EAAeqC,EAAUsB,GAAlEC,UAEF2G,GAAsBjL,EAAAA,EAAAA,cAAY,SAAC3C,GACvCJ,GAASsD,EAAAA,EAAAA,IAAkBlD,IAC3BJ,GAASqD,EAAAA,EAAAA,KAAyB,GACpC,GAAG,IAEH,OACE,mCACE,UAAC,MAAe,CAACgE,UAAWA,EAAU,UACpC,UAAC,MAAS,CAACG,YAAY,aAAa8G,UAAU,aAAatN,KAAK,SAAQ,SACrE,SAACuN,GAAY,OACZ,WAACpG,IAAa,gBAACuF,IAAKa,EAAaZ,UAAcY,EAAaC,gBAAc,cACvEhL,EAAWzC,KAAI,SAACX,EAAQqH,GAAK,OAC5B,UAAC,GAAM,CAELrH,OAAQA,EACR2N,YAAatG,EACb9D,uBAAwBA,EACxBD,oBAAqBA,EACrBoC,SAAUA,EACVsB,YAAaA,EACb4G,oBAAqBA,EACrBnK,gBAAiBA,EACjBoD,qBAAsBA,EACtBN,uBAAwBA,EACxBT,oBAAqBA,GAXhB9F,EAAOa,IAYZ,IAEHsN,EAAaE,eACA,OAItB,UAACW,GAAA,EAAa,CACZC,aAAc5K,EACd6K,cAAe5K,EAAAA,GACf6K,cAAc,eACdhC,UAAU,eACVzK,SAAUqD,EACVqJ,qBAAsB,OAExB,UAACJ,GAAA,EAAa,CACZC,aAAc7K,EACd8K,cAAe3K,EAAAA,GACf8K,aAAclK,EACdmK,gBAAiBlJ,EAAAA,GACjB+I,cAAc,YACdhC,UAAU,eACVzK,SAAUoE,EACVsI,qBAAsB,OAExB,UAACG,GAAA,EAAY,CACXN,aAAc3J,EACd4J,cAAexI,EAAAA,GACfsC,KAAK,aACLwG,YAAa7K,IAEdiK,IAAoB,UAACa,GAAA,EAAM,MAGlC,CAEA,QAAehE,EAAAA,EAAAA,MAAK6C,I,iCCzGpB,SAASoB,GAAQ,GAA8D,IAAD,EAAvDvC,EAAS,EAATA,UAAWzK,EAAQ,EAARA,SAAU2M,EAAY,EAAZA,aAClCxF,GAAMD,EAAAA,EAAAA,GAAe,eAArBC,EAER,GAMIE,EAAAA,GAAAA,IAA0B,CAC5BC,KAAM,WACNC,eAAgB,WAChBC,cAA2B,OAAZmF,QAAY,IAAZA,EAAAA,EAAgBM,GAAAA,KAR/BxF,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACAC,EAAW,EAAXA,YACAE,EAAQ,EAARA,SACaC,EAAM,EAAnBC,UAAaD,OAWf,OAJA1H,EAAAA,EAAAA,YAAU,WACRyH,EAAS,QACX,GAAG,KAGD,WAAC,MAAI,CACH,aAAW,OACXI,YAAU,EACVC,aAAa,MACblI,SAAU0H,EAAa1H,GAAU,WAEjC,UAACmI,GAAA,EAAK,CACJjK,KAAK,OACLkK,KAAK,QACLX,SAAUA,EACVE,YAAaA,EACbG,OAAQA,EAAO9G,MACfkM,gBAAiB/F,EAAE,GAAD,OAAIsD,EAAS,WAC/BpC,UAAW,CACTC,MAAO,EACPC,QAASpB,EAAE,4BAEbqB,UAAW,CACTF,MAAO,GACPC,QAASpB,EAAE,4BAEbsB,SAAUtB,EAAE,wBAEd,UAACuB,GAAA,EAAM,CAACxK,KAAK,SAASiP,WAAwB,QAAb,EAACrF,EAAO9G,aAAK,QAAZ,EAAcuH,SAAQ,SACrDpB,EAAE,uBAIX,CAEA6F,GAASI,aAAe,CACtBT,aAAc,MAGhB,I,eAAA,IAAe5D,EAAAA,EAAAA,MAAKiE,I,WCpEdK,IAAe/H,EAAAA,GAAAA,IAAOgI,GAAAA,EAAAA,KAAYC,OAAqB,YAAY,MAAQ,CAC/EC,QAAS,UACTC,QAAS,UACTC,KAAM,OACNC,SAJuE,EAATC,UAK/D,GALoBtI,CAKlB,uLAYGuI,GAAavI,GAAAA,GAAAA,IAAU,gJAUvBwI,GAAQxI,GAAAA,GAAAA,IAAU,uVAGF,YAAQ,SAALC,MAAkBC,OAAOuI,cAAc,IAe1DC,GAAa1I,GAAAA,GAAAA,GAAS,yJACX,YAAQ,SAALC,MAAkBW,MAAMlF,KAAK,IAChC,YAAQ,SAALuE,MAAkBgB,YAAY0H,MAAM,IACzC,YAAQ,SAAL1I,MAAkBS,UAAUkI,EAAE,IACrC,YAAQ,SAAL3I,MAAkBC,OAAOxE,KAAK,IAKtCmN,GAAqB7I,GAAAA,GAAAA,IAAU,2GAMxB,YAAQ,SAALC,MAAkBC,OAAOK,YAAY,ICSrD,I,kBAAA,GAvCA,SAAiC,GAMT,IALtB0G,EAAY,EAAZA,aACAC,EAAa,EAAbA,cACA/B,EAAS,EAATA,UACAzJ,EAAK,EAALA,MACAhB,EAAQ,EAARA,SAEM9C,GAAW0C,EAAAA,EAAAA,KACTuH,GAAMD,EAAAA,EAAAA,GAAe,cAAe,CAAEuD,UAAAA,IAAtCtD,EAEFiH,GAAanO,EAAAA,EAAAA,cAAY,WAC7B/C,EAASsP,GAAc,GACzB,GAAG,IAEH,OACE,UAAC6B,GAAA,EAAe,UACb9B,IACC,WAACc,GAAY,CAACO,UAAWU,GAAAA,GAAe,WACtC,UAACT,GAAU,CAAC1E,QAASiF,KACrB,WAACN,GAAK,YACJ,UAACE,GAAU,UAAE7G,EAAE,GAAD,OAAInG,OAClB,UAACuN,GAAc,CAAC9D,UAAWA,EAAWzK,SAAUA,KAChD,UAACmO,GAAkB,WACjB,UAACzF,GAAA,EAAM,CACLxK,KAAK,SACLyK,MAAM,OACNC,gBAAiBC,GAAAA,EAAAA,OAAAA,YACjBC,SAAUsF,EAAW,UAErB,UAAC,OAAO,eAQxB,ECtEMI,GAAkBlJ,GAAAA,GAAAA,QAAc,6PAiBhCmJ,GAAyBnJ,GAAAA,GAAAA,IAAU,wNAiBnCoJ,GAAepJ,GAAAA,GAAAA,GAAS,6OACb,YAAQ,SAALC,MAAkBW,MAAMlF,KAAK,IAChC,YAAQ,SAALuE,MAAkBgB,YAAY0H,MAAM,IACzC,YAAQ,SAAL1I,MAAkBS,UAAU2I,EAAE,IACrC,YAAQ,SAALpJ,MAAkBC,OAAOxE,KAAK,IAM3B,YAAQ,SAALuE,MAAkBS,UAAU2I,EAAE,IAI5CC,GAAuBtJ,GAAAA,GAAAA,IAAU,6CAIjCuJ,GAAqBvJ,GAAAA,GAAAA,EAAQ,wGAM7BwJ,GAAmBxJ,GAAAA,GAAAA,QAAc,2RAQjB,YAAQ,SAALC,MAAkBC,OAAOC,cAAc,ICzBhE,SAASsJ,GAAY,GAAuC,IAArCC,EAAc,EAAdA,eACfjM,GAAuBxH,EAAAA,EAAAA,GAAeuH,IACtC5F,GAAW0C,EAAAA,EAAAA,KACTuH,GAAMD,EAAAA,EAAAA,GAAe,cAAe,CAAEuD,UAAW,gBAAjDtD,EACR,EAAkE8H,IAA1DpT,EAAe,EAAfA,gBAAiBE,EAAwB,EAAxBA,yBAA0BO,EAAU,EAAVA,WACnD,EAA4CuP,IAApCnL,EAAU,EAAVA,WAAYE,EAAmB,EAAnBA,oBACpB,GACEsO,EAAAA,EAAAA,GAAiBrT,GADXsT,EAAsB,EAAtBA,uBAAwBC,EAAwB,EAAxBA,yBAA0BC,EAAa,EAAbA,cAAeC,EAAQ,EAARA,SAEzE,EACEC,EAAgB7O,GADVrD,EAAuB,EAAvBA,wBAAyBwC,EAAqB,EAArBA,sBAAuBG,EAAQ,EAARA,SAAUvE,EAAE,EAAFA,GAElE,EACE+T,IADMnP,EAAqB,EAArBA,sBAAuBZ,EAAuB,EAAvBA,wBAAyBa,EAAY,EAAZA,aAGlDmP,EAAuB,CAC3B1T,EACA6E,EACAuO,EACA9O,EACAR,EANmCiM,IAA7BhL,yBAQNiC,GACAoJ,MAAK,SAACC,GAAM,OAAKA,CAAM,IAEzB,GAAoC3L,EAAAA,EAAAA,UAAS,GAAD,OAAI0G,EAAE,qBAAqB,eAAhEuI,EAAU,KAAEC,EAAa,KAChC,GAAsClP,EAAAA,EAAAA,UAAS,SAAQ,eAAhDmP,EAAW,KAAEC,EAAc,KAC5BC,GAAWC,EAAAA,EAAAA,MACXnF,GAAMoF,EAAAA,EAAAA,QAA2B,MAEjCC,EAA0B,WAC1BrF,EAAIsF,SAAWtF,EAAIsF,QAAQC,aAAe,KAC5CR,EAAc,KACdE,EAAe,QACXC,EAASM,WAAQ,oBAAkB3U,IACrCuT,GAAe,KAGjBW,EAAc,GAAD,OAAIxI,EAAE,qBACnB0I,EAAe,SACfb,GAAe,GAEnB,EAWA,OATA5O,EAAAA,EAAAA,YAAU,WAGR,OAFAiQ,OAAOC,iBAAiB,SAAUL,GAClCA,IACO,WACLI,OAAOE,oBAAoB,SAAUN,GACrCjB,GAAe,EACjB,CACF,GAAG,KAGD,WAAC,MAAW,CAACpE,IAAKA,EAAI,WACpB,WAAC4D,GAAe,YACd,WAACC,GAAsB,YACrB,UAAC/F,GAAA,EAAM,CACLxK,KAAK,SACLyK,MAAM,OACN6H,UAAWC,GAAAA,GACX7H,gBAAiBC,GAAAA,EAAAA,OAAAA,YACjBxE,MAAOwE,GAAAA,EAAAA,OAAAA,aACPC,SAAU,kBAAMwG,GAAU,EAAE,EAAC,UAE7B,UAAC,MAAc,CAACoB,YAAa3U,OAE/B,UAAC2S,GAAY,UAAiB,OAAf7S,QAAe,IAAfA,OAAe,EAAfA,EAAiBmF,QAC/BnF,IACC,UAAC6M,GAAA,EAAM,CACLxK,KAAK,SACLyK,MAAM,OACNC,gBAAiBC,GAAAA,EAAAA,OAAAA,YACjBxE,MAAOwE,GAAAA,EAAAA,OAAAA,KACPC,SAAU,kBAAM5L,GAASyT,EAAAA,EAAAA,KAA0B,GAAM,EAAC,UAE1D,UAAC,MAAgB,UAIvB,UAAC/B,GAAoB,WACnB,UAAClG,GAAA,EAAM,CACLxK,KAAK,SACLyK,MAAOiH,EACPhH,gBAAiBC,GAAAA,EAAAA,OAAAA,YACjBxE,MAAOwE,GAAAA,EAAAA,OAAAA,aACPC,SAAU,kBAAM5L,GAASK,EAAAA,EAAAA,KAAyB,GAAM,EAAC,SAExDmS,UAIP,UAACb,GAAkB,UAAiB,OAAfhT,QAAe,IAAfA,OAAe,EAAfA,EAAiB0F,eACtC,UAACuN,GAAgB,UACJ,OAAVpO,QAAU,IAAVA,GAAAA,EAAYP,QACX,UAAC,GAAO,KAER,UAACyQ,GAAA,EAAkB,CACjBtK,KAAK,iCACLoJ,WAAW,mCACXlD,cAAejP,EAAAA,QAIrB,UAACsP,GAAA,EAAY,CACXN,aAAc6C,EACd5C,cAAemE,EAAAA,GACfrK,KAAK,gBACLwG,YAAauC,KAEf,UAACxC,GAAA,EAAY,CACXN,aAAc9M,EACd+M,cAAejM,EAAAA,GACf+F,KAAK,eACLwG,YAAaxM,KAEf,UAACuQ,GAAuB,CACtBtE,aAAclP,EACdmP,cAAejP,EAAAA,GACfkN,UAAU,iBACVzJ,MAAM,iBACNhB,SAAUA,IAEXyP,IAAwB,UAAC1C,GAAA,EAAM,IAC/BzQ,IAAc,UAAC,KAAQ,CAACwU,GAAG,QAGlC,CAEA,QAAe/H,EAAAA,EAAAA,MAAKgG,G","sources":["hooks/useGetProjectById.ts","redux/api/columnApiSlice.ts","redux/selectors/columnSelectors.ts","hooks/useCreateColumn.ts","hooks/useDeleteColumn.ts","hooks/useGetAllColumns.ts","hooks/useEditColumnTitle.ts","redux/api/tasksApiSlice.ts","redux/selectors/taskSelectors.ts","hooks/useCreateTask.ts","hooks/useDeleteTask.ts","hooks/useEditTask.ts","hooks/useDragAndDrop.ts","components/Columns/Columns.style.tsx","hooks/useGetAllTasks.ts","components/EditText/EditText.styles.tsx","components/EditText/EditTextForm.tsx","components/EditText/EditText.tsx","components/TaskCard/TaskCard.style.tsx","components/TaskCard/TaskCard.tsx","components/Columns/Column.tsx","components/Columns/Columns.tsx","components/PopupWithFormColumn/EditFormColumn/EditFormColumn.tsx","components/PopupWithFormColumn/PopupWithFormColumn.style.tsx","components/PopupWithFormColumn/PopupWithFormColumn.tsx","pages/ProjectPage/ProjectPage.style.tsx","pages/ProjectPage/ProjectPage.tsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\n\nimport { useGetProjectByIdQuery } from 'redux/api/projectsApiSlice';\nimport { getLoggedIn } from 'redux/selectors/userSelectors';\n\nimport { useAppSelector } from './useRedux';\n\nconst useGetProjectById = () => {\n  const isLoggedIn = useAppSelector(getLoggedIn);\n  const { id } = useParams();\n\n  const {\n    data: selectedProject,\n    isFetching: isLoadingSelectedProject,\n    isSuccess: isSuccessSelectedProject,\n    isError: isErrorSelectedProject,\n    isUninitialized,\n  } = useGetProjectByIdQuery(id ?? '', { skip: !isLoggedIn });\n\n  const isNavigate =\n    !selectedProject &&\n    (isUninitialized || isErrorSelectedProject || isSuccessSelectedProject);\n\n  return {\n    selectedProject,\n    isLoadingSelectedProject,\n    isSuccessSelectedProject,\n    isNavigate,\n  };\n};\n\nexport default useGetProjectById;\n","import { setCreateColumnPopupOpen } from 'redux/slices/columnSlice';\nimport { RootState } from 'redux/store';\n\nimport { addFetchOptions } from 'utils/functions';\n\nimport { Endpoints, Methods } from 'ts/enums';\nimport { ColumnData, Column } from 'ts/interfaces';\n\nimport apiSlice from './apiSlice';\n\ntype OmitColumnData = Omit<ColumnData, 'title' | 'order'>;\n\ninterface ColumnResponse {\n  id: string;\n  body: Column;\n}\n\ninterface ColumnOrder {\n  _id: string;\n  order: number;\n}\n\nconst columnsApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    getAllColumns: builder.query<ColumnData[], string>({\n      query: (id) =>\n        addFetchOptions(`${Endpoints.boards}${id}/${Endpoints.columns}`, Methods.get),\n      onQueryStarted: async (_, { dispatch, queryFulfilled, getState }) => {\n        try {\n          const { isCreateColumnPopupOpen } = (getState() as RootState).column;\n          await queryFulfilled;\n          if (isCreateColumnPopupOpen) {\n            dispatch(setCreateColumnPopupOpen(false));\n          }\n        } catch (error) {\n          if (error instanceof Error) {\n            throw error;\n          }\n        }\n      },\n      transformResponse: (columns: ColumnData[]) =>\n        columns.sort((a, b) => a.order - b.order),\n      providesTags: (result) =>\n        result\n          ? [...result.map(({ _id }) => ({ type: 'Column' as const, id: _id })), 'Column']\n          : ['Column'],\n    }),\n\n    createColumn: builder.mutation<ColumnData, ColumnResponse>({\n      query: ({ id, body }) => ({\n        ...addFetchOptions(`${Endpoints.boards}${id}/${Endpoints.columns}`, Methods.post),\n        body,\n      }),\n      invalidatesTags: ['Column'],\n    }),\n\n    deleteColumnById: builder.mutation<ColumnData, ColumnData>({\n      query: ({ _id, boardId }) =>\n        addFetchOptions(\n          `${Endpoints.boards}${boardId}/${Endpoints.columns}${_id}`,\n          Methods.delete\n        ),\n      invalidatesTags: ['Column'],\n    }),\n\n    updateColumnById: builder.mutation<ColumnData, ColumnData>({\n      query: ({ _id, boardId, ...body }) => ({\n        ...addFetchOptions(\n          `${Endpoints.boards}${boardId}/${Endpoints.columns}${_id}`,\n          Methods.put\n        ),\n        body,\n      }),\n      invalidatesTags: ['Column'],\n    }),\n\n    updateOrderColumn: builder.mutation<ColumnData[], ColumnOrder[]>({\n      query: (body) => ({\n        ...addFetchOptions(`${Endpoints.columnsSet}`, Methods.patch),\n        body,\n      }),\n      invalidatesTags: ['Column'],\n    }),\n\n    getColumnById: builder.query<ColumnData, OmitColumnData>({\n      query: ({ _id, boardId }) =>\n        addFetchOptions(\n          `${Endpoints.boards}${boardId}/${Endpoints.columns}${_id}`,\n          Methods.get\n        ),\n      providesTags: ['Column'],\n    }),\n  }),\n});\n\nexport const {\n  useGetAllColumnsQuery,\n  useCreateColumnMutation,\n  useDeleteColumnByIdMutation,\n  useUpdateColumnByIdMutation,\n  useUpdateOrderColumnMutation,\n  useGetColumnByIdQuery,\n} = columnsApiSlice;\n\nconst getBaseAllColumns = (state: RootState, id: string) =>\n  columnsApiSlice.endpoints.getAllColumns.select(id)(state);\n\nexport { getBaseAllColumns };\n","import { createSelector } from '@reduxjs/toolkit';\nimport { getBaseAllColumns } from 'redux/api/columnApiSlice';\nimport { RootState } from 'redux/store';\n\nconst getBaseColumnState = (state: RootState) => state.column;\n\nconst getSelectedColumn = createSelector(\n  getBaseColumnState,\n  (state) => state.selectedColumn\n);\n\nconst getDeleteColumnPopupOpen = createSelector(\n  getBaseColumnState,\n  (state) => state.isDeleteColumnPopupOpen\n);\n\nconst getCreateColumnPopupOpen = createSelector(\n  getBaseColumnState,\n  (state) => state.isCreateColumnPopupOpen\n);\n\nconst getAllColumns = createSelector(\n  [getBaseAllColumns, (state: RootState, id: string) => id],\n  (result) => result.data ?? []\n);\n\nexport {\n  getSelectedColumn,\n  getDeleteColumnPopupOpen,\n  getCreateColumnPopupOpen,\n  getAllColumns,\n};\n","import { useCallback, useEffect } from 'react';\nimport { SubmitHandler } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\n\nimport { ColumnData, ColumnFormValues } from 'ts/interfaces';\n\nimport { useCreateColumnMutation } from 'redux/api/columnApiSlice';\nimport { getCreateColumnPopupOpen } from 'redux/selectors/columnSelectors';\nimport { setCreateColumnPopupOpen } from 'redux/slices/columnSlice';\n\nimport { useAppDispatch, useAppSelector } from './useRedux';\n\nconst useCreateColumn = (columns: ColumnData[]) => {\n  const isCreateColumnPopupOpen = useAppSelector(getCreateColumnPopupOpen);\n  const dispatch = useAppDispatch();\n  const { id } = useParams();\n  const [\n    createColumn,\n    { isLoading: isLoadingCreateColumn, isSuccess: isSuccessCreateColumn },\n  ] = useCreateColumnMutation();\n\n  const onSubmit: SubmitHandler<ColumnFormValues> = useCallback(\n    async (formValues) => {\n      if (id) {\n        await createColumn({\n          id,\n          body: {\n            ...formValues,\n            order: columns ? columns.length : 0,\n          },\n        });\n      }\n    },\n    [isCreateColumnPopupOpen]\n  );\n\n  useEffect(\n    () => () => {\n      if (isCreateColumnPopupOpen) {\n        dispatch(setCreateColumnPopupOpen(false));\n      }\n    },\n    []\n  );\n\n  return {\n    isSuccessCreateColumn,\n    isCreateColumnPopupOpen,\n    isLoadingCreateColumn,\n    onSubmit,\n    id,\n  };\n};\n\nexport default useCreateColumn;\n","import { useCallback, useEffect } from 'react';\n\nimport { useDeleteColumnByIdMutation } from 'redux/api/columnApiSlice';\nimport { setDeleteColumnPopupOpen, setSelectedColumn } from 'redux/slices/columnSlice';\nimport {\n  getDeleteColumnPopupOpen,\n  getSelectedColumn,\n} from 'redux/selectors/columnSelectors';\n\nimport { useAppSelector, useAppDispatch } from './useRedux';\n\nconst useDeleteColumn = () => {\n  const selectedColumn = useAppSelector(getSelectedColumn);\n  const isDeleteColumnPopupOpen = useAppSelector(getDeleteColumnPopupOpen);\n  const dispatch = useAppDispatch();\n  const [deleteColumnById, { isLoading: isLoadingDeleteColumn }] =\n    useDeleteColumnByIdMutation();\n\n  const deleteColumn = useCallback(async () => {\n    if (selectedColumn) {\n      dispatch(setDeleteColumnPopupOpen(false));\n      dispatch(setSelectedColumn(null));\n      await deleteColumnById(selectedColumn);\n    }\n  }, [selectedColumn]);\n\n  useEffect(\n    () => () => {\n      if (isDeleteColumnPopupOpen) {\n        dispatch(setDeleteColumnPopupOpen(false));\n        dispatch(setSelectedColumn(null));\n      }\n    },\n    []\n  );\n\n  return {\n    isLoadingDeleteColumn,\n    isDeleteColumnPopupOpen,\n    deleteColumn,\n  };\n};\n\nexport default useDeleteColumn;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useGetAllColumnsQuery } from 'redux/api/columnApiSlice';\nimport { getAllColumns } from 'redux/selectors/columnSelectors';\nimport { getLoggedIn } from 'redux/selectors/userSelectors';\nimport { RootState } from 'redux/store';\nimport { ColumnData } from 'ts/interfaces';\n\nimport { useAppSelector } from './useRedux';\n\nconst useGetAllColumns = () => {\n  const { id } = useParams();\n  const [columnList, setColumnList] = useState<ColumnData[]>([]);\n  const isLoggedIn = useAppSelector(getLoggedIn);\n  const columns = useAppSelector((state: RootState) => getAllColumns(state, id ?? ''));\n  const { isFetching: isLoadingColumnList, isSuccess: isSuccessGetColumnList } =\n    useGetAllColumnsQuery(id ?? '', { skip: !isLoggedIn });\n\n  useEffect(() => {\n    if (columns) {\n      setColumnList(columns);\n    }\n  }, [columns]);\n\n  return {\n    columns,\n    columnList,\n    isLoadingColumnList,\n    isSuccessGetColumnList,\n    setColumnList,\n  };\n};\n\nexport default useGetAllColumns;\n","import { useCallback } from 'react';\n\nimport { useUpdateColumnByIdMutation } from 'redux/api/columnApiSlice';\n\nimport { ColumnData } from 'ts/interfaces';\n\nconst useEditColumnTitle = () => {\n  const [updateColumnById, { isLoading: isLoadingEditColumnTitle }] =\n    useUpdateColumnByIdMutation();\n\n  const editColumnTitle = useCallback(async (title: string, column: ColumnData) => {\n    await updateColumnById({\n      ...column,\n      title,\n    });\n  }, []);\n\n  return {\n    isLoadingEditColumnTitle,\n    editColumnTitle,\n  };\n};\n\nexport default useEditColumnTitle;\n","import {\n  setCreateTaskPopupOpen,\n  setEditTaskPopupOpen,\n  setLoadingGetAllTasks,\n} from 'redux/slices/taskSlice';\nimport { RootState } from 'redux/store';\n\nimport { addFetchOptions } from 'utils/functions';\n\nimport { Endpoints, Methods } from 'ts/enums';\nimport { NewTask, Task, TaskData, TasksProps } from 'ts/interfaces';\n\nimport apiSlice from './apiSlice';\n\ninterface MutationTaskProps extends TasksProps {\n  id: string;\n  body: NewTask;\n}\n\ninterface TaskOrder {\n  _id: string;\n  order: number;\n  columnId: string;\n}\n\nconst tasksApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    getAllTasks: builder.query<Task[], TasksProps>({\n      query: ({ boardId, columnId }) =>\n        addFetchOptions(\n          `${Endpoints.boards}${boardId}/${Endpoints.columns}${columnId}/${Endpoints.tasks}`,\n          Methods.get\n        ),\n      transformResponse: (tasks: TaskData[]) =>\n        tasks\n          .map((data) => ({\n            ...data,\n            ...JSON.parse(data.description),\n          }))\n          .sort((a, b) => a.order - b.order),\n      onQueryStarted: async (_, { dispatch, queryFulfilled, getState }) => {\n        try {\n          dispatch(setLoadingGetAllTasks(true));\n          const { isEditTaskPopupOpen, isCreateTaskPopupOpen } = (getState() as RootState)\n            .task;\n          await queryFulfilled;\n          dispatch(setLoadingGetAllTasks(false));\n          if (isCreateTaskPopupOpen) {\n            dispatch(setCreateTaskPopupOpen(false));\n          } else if (isEditTaskPopupOpen) {\n            dispatch(setEditTaskPopupOpen(false));\n          }\n        } catch (error) {\n          if (error instanceof Error) {\n            throw error;\n          }\n        }\n      },\n      providesTags: (result) =>\n        result\n          ? [...result.map(({ _id }) => ({ type: 'Task' as const, id: _id })), 'Task']\n          : ['Task'],\n    }),\n\n    createTask: builder.mutation<TaskData, Omit<MutationTaskProps, 'id'>>({\n      query: ({ boardId, columnId, body }) => ({\n        ...addFetchOptions(\n          `${Endpoints.boards}${boardId}/${Endpoints.columns}${columnId}/${Endpoints.tasks}`,\n          Methods.post\n        ),\n        body,\n      }),\n      invalidatesTags: ['Task'],\n    }),\n\n    updateTask: builder.mutation<TaskData, MutationTaskProps>({\n      query: ({ boardId, columnId, id, body }) => ({\n        ...addFetchOptions(\n          `${Endpoints.boards}${boardId}/${Endpoints.columns}${columnId}/${Endpoints.tasks}${id}`,\n          Methods.put\n        ),\n        body: {\n          ...body,\n          columnId,\n        },\n      }),\n      invalidatesTags: ['Task'],\n    }),\n\n    updateOrderTask: builder.mutation<TaskData[], TaskOrder[]>({\n      query: (body) => ({\n        ...addFetchOptions(`${Endpoints.tasksSet}`, Methods.patch),\n        body,\n      }),\n      invalidatesTags: ['Task'],\n    }),\n\n    deleteTask: builder.mutation<TaskData, Omit<MutationTaskProps, 'body'>>({\n      query: ({ boardId, columnId, id }) => ({\n        ...addFetchOptions(\n          `${Endpoints.boards}${boardId}/${Endpoints.columns}${columnId}/${Endpoints.tasks}${id}`,\n          Methods.delete\n        ),\n      }),\n      invalidatesTags: ['Task'],\n    }),\n  }),\n});\n\nexport const {\n  useGetAllTasksQuery,\n  useCreateTaskMutation,\n  useUpdateTaskMutation,\n  useUpdateOrderTaskMutation,\n  useDeleteTaskMutation,\n} = tasksApiSlice;\n\nconst getBaseAllTasks = (state: RootState, query: TasksProps) =>\n  tasksApiSlice.endpoints.getAllTasks.select(query)(state);\n\nexport { getBaseAllTasks };\n","import { createSelector } from '@reduxjs/toolkit';\nimport { getBaseAllTasks } from 'redux/api/tasksApiSlice';\nimport { RootState } from 'redux/store';\n\nimport { TasksProps } from 'ts/interfaces';\n\nconst getBaseTaskState = (state: RootState) => state.task;\n\nconst getSelectedTask = createSelector(getBaseTaskState, (state) => state.selectedTask);\n\nconst getCreateTaskPopupOpen = createSelector(\n  getBaseTaskState,\n  (state) => state.isCreateTaskPopupOpen\n);\n\nconst getDeleteTaskPopupOpen = createSelector(\n  getBaseTaskState,\n  (state) => state.isDeleteTaskPopupOpen\n);\n\nconst getEditTaskPopupOpen = createSelector(\n  getBaseTaskState,\n  (state) => state.isEditTaskPopupOpen\n);\n\nconst getLoadingTasksList = createSelector(\n  getBaseTaskState,\n  (state) => state.isLoadingGetAllTasks\n);\n\nconst getAllTasks = createSelector(\n  [getBaseAllTasks, (state: RootState, query: TasksProps) => query],\n  (result) => result.data ?? []\n);\n\nexport {\n  getSelectedTask,\n  getCreateTaskPopupOpen,\n  getDeleteTaskPopupOpen,\n  getAllTasks,\n  getLoadingTasksList,\n  getEditTaskPopupOpen,\n};\n","import { useCallback, useEffect } from 'react';\nimport { SubmitHandler } from 'react-hook-form';\n\nimport { useCreateTaskMutation } from 'redux/api/tasksApiSlice';\nimport { getSelectedColumn } from 'redux/selectors/columnSelectors';\nimport { getCreateTaskPopupOpen } from 'redux/selectors/taskSelectors';\nimport { getAuthUser } from 'redux/selectors/userSelectors';\nimport { setSelectedColumn } from 'redux/slices/columnSlice';\nimport { setCreateTaskPopupOpen, setSelectedTask } from 'redux/slices/taskSlice';\n\nimport { ColumnData, EditFormValues, TaskList } from 'ts/interfaces';\n\nimport { useAppDispatch, useAppSelector } from './useRedux';\n\nconst useCreateTask = (taskList: TaskList) => {\n  const isCreateTaskPopupOpen = useAppSelector(getCreateTaskPopupOpen);\n  const authUser = useAppSelector(getAuthUser);\n  const selectedColumn = useAppSelector(getSelectedColumn);\n  const dispatch = useAppDispatch();\n  const [createTask, { isLoading: isLoadingCreateTask }] = useCreateTaskMutation();\n\n  const showCreateTaskPopup = useCallback((column: ColumnData) => {\n    dispatch(setSelectedColumn(column));\n    dispatch(setCreateTaskPopupOpen(true));\n  }, []);\n\n  const createTaskOnSubmit: SubmitHandler<EditFormValues> = useCallback(\n    async ({ title, ...formValues }) => {\n      if (selectedColumn) {\n        await createTask({\n          boardId: selectedColumn.boardId,\n          columnId: selectedColumn._id,\n          body: {\n            title,\n            description: JSON.stringify({ ...formValues }),\n            userId: authUser?._id ?? '',\n            users: [formValues.responsibleUser],\n            order: taskList[selectedColumn._id] ? taskList[selectedColumn._id].length : 0,\n          },\n        });\n      }\n    },\n    [isCreateTaskPopupOpen]\n  );\n\n  useEffect(\n    () => () => {\n      if (isCreateTaskPopupOpen) {\n        dispatch(setCreateTaskPopupOpen(false));\n        dispatch(setSelectedTask(null));\n      }\n    },\n    []\n  );\n\n  return {\n    isCreateTaskPopupOpen,\n    isLoadingCreateTask,\n    createTaskOnSubmit,\n    showCreateTaskPopup,\n  };\n};\n\nexport default useCreateTask;\n","import { useCallback, useEffect } from 'react';\n\nimport { useDeleteTaskMutation } from 'redux/api/tasksApiSlice';\nimport { getDeleteTaskPopupOpen } from 'redux/selectors/taskSelectors';\nimport { setSelectedTask, setDeleteTaskPopupOpen } from 'redux/slices/taskSlice';\n\nimport { Task } from 'ts/interfaces';\n\nimport { useAppSelector, useAppDispatch } from './useRedux';\n\nconst useDeleteTask = (selectedTask: Task | null) => {\n  const isDeleteTaskPopupOpen = useAppSelector(getDeleteTaskPopupOpen);\n  const [deleteTaskById, { isLoading: isLoadingDeleteTask }] = useDeleteTaskMutation();\n  const dispatch = useAppDispatch();\n\n  const showDeletePopupOnClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, task: Task) => {\n      event.stopPropagation();\n      dispatch(setSelectedTask(task));\n      dispatch(setDeleteTaskPopupOpen(true));\n    },\n    []\n  );\n\n  const deleteTask = useCallback(async () => {\n    if (selectedTask) {\n      const { boardId, columnId } = selectedTask;\n      dispatch(setDeleteTaskPopupOpen(false));\n      dispatch(setSelectedTask(null));\n      await deleteTaskById({ boardId, columnId, id: selectedTask._id });\n    }\n  }, [selectedTask]);\n\n  useEffect(() => {\n    if (!isDeleteTaskPopupOpen && selectedTask) {\n      dispatch(setSelectedTask(null));\n    }\n  }, [isDeleteTaskPopupOpen]);\n\n  useEffect(\n    () => () => {\n      if (isDeleteTaskPopupOpen) {\n        dispatch(setDeleteTaskPopupOpen(false));\n        dispatch(setSelectedTask(null));\n      }\n    },\n    []\n  );\n\n  return {\n    isDeleteTaskPopupOpen,\n    isLoadingDeleteTask,\n    showDeletePopupOnClick,\n    deleteTask,\n  };\n};\n\nexport default useDeleteTask;\n","import { useCallback, useEffect } from 'react';\nimport { SubmitHandler } from 'react-hook-form';\nimport { useUpdateTaskMutation } from 'redux/api/tasksApiSlice';\nimport { getEditTaskPopupOpen } from 'redux/selectors/taskSelectors';\nimport { setEditTaskPopupOpen, setSelectedTask } from 'redux/slices/taskSlice';\n\nimport { EditFormValues, Task } from 'ts/interfaces';\n\nimport { useAppDispatch, useAppSelector } from './useRedux';\n\nconst useEditTask = (selectedTask: Task | null) => {\n  const isEditTaskPopupOpen = useAppSelector(getEditTaskPopupOpen);\n  const [editTask, { isLoading: isLoadingEditTask }] = useUpdateTaskMutation();\n  const dispatch = useAppDispatch();\n\n  const showEditPopupOnClick = useCallback((task: Task) => {\n    dispatch(setSelectedTask(task));\n    dispatch(setEditTaskPopupOpen(true));\n  }, []);\n\n  const editTaskOnSubmit: SubmitHandler<EditFormValues> = useCallback(\n    async ({ title, color, description, responsibleUser }) => {\n      if (selectedTask) {\n        const { boardId, columnId, userId, order } = selectedTask;\n        dispatch(setEditTaskPopupOpen(false));\n        dispatch(setSelectedTask(null));\n        await editTask({\n          boardId,\n          columnId,\n          id: selectedTask._id,\n          body: {\n            title,\n            description: JSON.stringify({ color, description }),\n            userId,\n            users: [responsibleUser],\n            order,\n          },\n        });\n      }\n    },\n    [selectedTask]\n  );\n\n  useEffect(\n    () => () => {\n      if (isEditTaskPopupOpen) {\n        dispatch(setEditTaskPopupOpen(false));\n        dispatch(setSelectedTask(null));\n      }\n    },\n    []\n  );\n\n  return {\n    isEditTaskPopupOpen,\n    isLoadingEditTask,\n    showEditPopupOnClick,\n    editTaskOnSubmit,\n  };\n};\n\nexport default useEditTask;\n","import { DropResult } from '@hello-pangea/dnd';\n\nimport { useUpdateOrderColumnMutation } from 'redux/api/columnApiSlice';\nimport { useUpdateOrderTaskMutation } from 'redux/api/tasksApiSlice';\n\nimport { ColumnData, TaskList } from 'ts/interfaces';\n\nconst useDragAndDrop = (\n  columnList: ColumnData[],\n  setColumnList: React.Dispatch<React.SetStateAction<ColumnData[]>>,\n  taskList: TaskList,\n  setTaskList: React.Dispatch<React.SetStateAction<TaskList>>\n) => {\n  const [updateOrderColumn] = useUpdateOrderColumnMutation();\n  const [updateOrderTask] = useUpdateOrderTaskMutation();\n\n  const onDragEnd = ({ destination, source, type }: DropResult) => {\n    if (!destination) {\n      return;\n    }\n\n    if (type === 'column') {\n      if (\n        destination?.droppableId === source.droppableId &&\n        destination.index === source.index\n      ) {\n        return;\n      }\n      const columns = [...columnList];\n      const [reorderedColumn] = columns.splice(source.index, 1);\n      columns.splice(destination.index, 0, reorderedColumn);\n\n      setColumnList(columns);\n      updateOrderColumn(\n        columns.map(({ _id }, index) => ({\n          _id,\n          order: index,\n        }))\n      );\n    }\n\n    if (type === 'task') {\n      const sourceTasks = [...taskList[source.droppableId]];\n      const destinationTasks = [...taskList[destination.droppableId]];\n\n      if (source.droppableId !== destination.droppableId) {\n        const [reorderedTask] = sourceTasks.splice(source.index, 1);\n        destinationTasks.splice(destination.index, 0, reorderedTask);\n\n        setTaskList((prev) => ({\n          ...prev,\n          [source.droppableId]: sourceTasks,\n          [destination.droppableId]: [\n            ...destinationTasks.map((item) => ({\n              ...item,\n              columnId: destination.droppableId,\n            })),\n          ],\n        }));\n\n        updateOrderTask([\n          ...sourceTasks.map(({ _id, columnId }, index) => ({\n            _id,\n            columnId,\n            order: index,\n          })),\n          ...destinationTasks.map(({ _id }, index) => ({\n            _id,\n            order: index,\n            columnId: destination.droppableId,\n          })),\n        ]);\n      } else {\n        const copiedSourceTasks = [...sourceTasks];\n        const [reorderTask] = copiedSourceTasks.splice(source.index, 1);\n        copiedSourceTasks.splice(destination.index, 0, reorderTask);\n\n        setTaskList((prev) => ({\n          ...prev,\n          [source.droppableId]: copiedSourceTasks,\n        }));\n\n        updateOrderTask(\n          copiedSourceTasks.map(({ _id, columnId }, index) => ({\n            _id,\n            columnId,\n            order: index,\n          }))\n        );\n      }\n    }\n  };\n\n  return {\n    onDragEnd,\n  };\n};\n\nexport default useDragAndDrop;\n","import styled from 'styled-components';\n\ninterface DragProps {\n  $isDragging?: boolean;\n}\n\nconst ColumnWrapper = styled.div`\n  display: flex;\n  overflow: auto;\n  width: 100%;\n  gap: 25px;\n  height: calc(100vh - 430px);\n\n  @media (max-width: 800px) {\n    height: calc(100vh - 320px);\n  }\n\n  &::-webkit-scrollbar {\n    width: 16px;\n    background-color: ${({ theme }) => theme.colors.backgroundGrey};\n  }\n\n  &::-webkit-scrollbar-track {\n    background-color: ${({ theme }) => theme.colors.backgroundWhite};\n    border-radius: 16px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: #babac0;\n    border-radius: 16px;\n    border: 4px solid ${({ theme }) => theme.colors.backgroundWhite};\n  }\n\n  &::-webkit-scrollbar-button {\n    display: none;\n  }\n`;\n\nconst ColumnContainer = styled.div<DragProps>`\n  min-width: 300px;\n  max-width: 300px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 10px;\n  padding: 10px;\n  margin-bottom: 10px;\n  border-radius: 10px;\n  border-left: 5px solid\n    ${({ $isDragging, theme }) =>\n      $isDragging ? theme.colors.primaryColor : theme.colors.grey};\n  box-shadow: 0px 10px 13px rgb(0 0 0 / 2%);\n  background-color: ${({ theme }) => theme.colors.backgroundWhite};\n  cursor: default;\n\n  @media (max-width: 400px) {\n    min-width: 270px;\n  }\n\n  @media (max-width: 360px) {\n    min-width: 240px;\n  }\n`;\n\nconst ColumnHeader = styled.div`\n  width: 100%;\n  height: auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n`;\n\nconst ColumnTitle = styled.h3`\n  font-size: ${({ theme }) => theme.fontSizes.h5};\n  font-family: ${({ theme }) => theme.fonts.title};\n  text-align: left;\n`;\n\nconst TasksWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  &::-webkit-scrollbar {\n    width: 16px;\n    background-color: ${({ theme }) => theme.colors.backgroundWhite};\n  }\n\n  &::-webkit-scrollbar-track {\n    border-radius: 16px;\n    background-color: ${({ theme }) => theme.colors.backgroundWhite};\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: #babac0;\n    border-radius: 16px;\n    border: 4px solid ${({ theme }) => theme.colors.backgroundWhite};\n  }\n\n  &::-webkit-scrollbar-button {\n    display: none;\n  }\n`;\n\nexport { ColumnWrapper, ColumnContainer, ColumnHeader, ColumnTitle, TasksWrapper };\n","import { useEffect } from 'react';\n\nimport { useGetAllTasksQuery } from 'redux/api/tasksApiSlice';\nimport { getAllTasks } from 'redux/selectors/taskSelectors';\nimport { getLoggedIn } from 'redux/selectors/userSelectors';\nimport { RootState } from 'redux/store';\n\nimport { TaskList } from 'ts/interfaces';\n\nimport { useAppSelector } from './useRedux';\n\nconst useGetAllTasks = (\n  boardId: string,\n  columnId: string,\n  setTaskList: React.Dispatch<React.SetStateAction<TaskList>>\n) => {\n  const isLoggedIn = useAppSelector(getLoggedIn);\n  const { isSuccess: isSuccessGetAllTasks } = useGetAllTasksQuery(\n    { boardId, columnId },\n    { skip: !isLoggedIn }\n  );\n  const tasks = useAppSelector((state: RootState) =>\n    getAllTasks(state, { boardId, columnId })\n  );\n\n  useEffect(() => {\n    if (tasks && isSuccessGetAllTasks) {\n      setTaskList((prev) => ({\n        ...prev,\n        [columnId]: tasks,\n      }));\n    }\n  }, [tasks, isSuccessGetAllTasks]);\n\n  return {\n    tasks,\n    isSuccessGetAllTasks,\n  };\n};\n\nexport default useGetAllTasks;\n","import styled from 'styled-components';\n\nimport { InputErrorText } from 'components/Input/Input.style';\nimport StyledButton from 'components/Button/Button.style';\n\nconst EditTextElement = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst StyledEditText = styled.h5`\n  font-size: ${({ theme }) => theme.fontSizes.h5};\n  font-family: ${({ theme }) => theme.fonts.text};\n  font-weight: ${({ theme }) => theme.fontsWeight.bold};\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 210px;\n\n  @media (max-width: 400px) {\n    max-width: 170px;\n  }\n`;\n\nconst Form = styled.form`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  height: 80px;\n\n  Button {\n    margin-top: 8px;\n    padding: 0;\n    align-self: flex-start;\n  }\n\n  ${InputErrorText} {\n    min-height: 32px;\n  }\n`;\n\nconst EditTextContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst TextWrapper = styled.div`\n  display: flex;\n  width: 100%;\n\n  ${StyledButton} {\n    padding: 0;\n    align-self: center;\n  }\n`;\n\nconst EditTextWrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n  gap: 8px;\n  height: 80px;\n  padding-top: 10px;\n\n  Button {\n    padding: 0;\n    align-self: flex-end;\n  }\n`;\n\nexport {\n  Form,\n  EditTextContainer,\n  EditTextWrapper,\n  TextWrapper,\n  StyledEditText,\n  EditTextElement,\n};\n","import React, { memo, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from 'components/Button/Button';\nimport Input from 'components/Input/Input';\n\nimport { ColumnData } from 'ts/interfaces';\n\nimport defaultTheme from 'styles/theme';\nimport { StyledCloseIcon, StyledConfirmIcon } from 'styles/styles';\nimport { Form } from './EditText.styles';\n\ninterface EditTextFormProps {\n  item: ColumnData;\n  toggleEditingTextOnClick: () => void;\n  editText: (title: string, item: ColumnData) => void;\n}\n\nfunction EditTextForm({ item, toggleEditingTextOnClick, editText }: EditTextFormProps) {\n  const { t, i18n } = useTranslation('translation');\n  const {\n    register,\n    handleSubmit,\n    clearErrors,\n    trigger,\n    setFocus,\n    formState: { errors },\n  } = useForm<{ title: string }>({\n    mode: 'onSubmit',\n    reValidateMode: 'onSubmit',\n    defaultValues: { title: item.title },\n  });\n\n  useEffect(() => {\n    if (errors) {\n      trigger(['title']);\n    }\n  }, [i18n.language]);\n\n  useEffect(() => {\n    setFocus('title');\n  }, []);\n\n  return (\n    <Form\n      aria-label=\"form\"\n      noValidate\n      autoComplete=\"off\"\n      onSubmit={handleSubmit(({ title }) => editText(title, item))}\n    >\n      <Input\n        type=\"text\"\n        name=\"title\"\n        errors={errors.title}\n        register={register}\n        clearErrors={clearErrors}\n        minLength={{\n          value: 3,\n          message: t('editForm.titleMinLength'),\n        }}\n        maxLength={{\n          value: 25,\n          message: t('editForm.titleMaxLength'),\n        }}\n        required={t('editForm.required')}\n      />\n      <Button\n        type=\"submit\"\n        width=\"25px\"\n        backgroundColor={defaultTheme.colors.transparent}\n      >\n        <StyledConfirmIcon />\n      </Button>\n      <Button\n        type=\"button\"\n        width=\"25px\"\n        backgroundColor={defaultTheme.colors.transparent}\n        callback={toggleEditingTextOnClick}\n      >\n        <StyledCloseIcon />\n      </Button>\n    </Form>\n  );\n}\n\nexport default memo(EditTextForm);\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport Button from 'components/Button/Button';\n\nimport { ColumnData } from 'ts/interfaces';\n\nimport { StyledDeleteIcon, StyledEditTextIcon } from 'styles/styles';\nimport defaultTheme from 'styles/theme';\nimport {\n  EditTextWrapper,\n  EditTextContainer,\n  StyledEditText,\n  TextWrapper,\n  EditTextElement,\n} from './EditText.styles';\n\nimport EditTextForm from './EditTextForm';\n\ninterface EditTextProps {\n  item: ColumnData;\n  isSuccess: boolean;\n  isLoading: boolean;\n  deleteItemOnClick: (column: ColumnData) => void;\n  editText: (title: string, item: ColumnData) => void;\n}\n\nfunction EditText({\n  item,\n  isSuccess,\n  isLoading,\n  deleteItemOnClick,\n  editText,\n}: EditTextProps) {\n  const [isEditingText, setEditingText] = useState(false);\n\n  const toggleEditingTextOnClick = useCallback(() => {\n    setEditingText((prev) => !prev);\n  }, [isEditingText]);\n\n  useEffect(() => {\n    if (isSuccess && !isLoading) {\n      setEditingText(false);\n    }\n  }, [isSuccess, isLoading]);\n\n  return (\n    <EditTextContainer>\n      {isEditingText ? (\n        <EditTextForm\n          item={item}\n          toggleEditingTextOnClick={toggleEditingTextOnClick}\n          editText={editText}\n        />\n      ) : (\n        <EditTextWrapper>\n          <EditTextElement>\n            <TextWrapper>\n              <StyledEditText onClick={toggleEditingTextOnClick}>\n                {item.title}\n              </StyledEditText>\n              <Button\n                type=\"button\"\n                width=\"25px\"\n                backgroundColor={defaultTheme.colors.transparent}\n                callback={toggleEditingTextOnClick}\n              >\n                <StyledEditTextIcon />\n              </Button>\n            </TextWrapper>\n            <Button\n              type=\"button\"\n              width=\"25px\"\n              backgroundColor={defaultTheme.colors.transparent}\n              color={defaultTheme.colors.pink}\n              callback={() => deleteItemOnClick(item)}\n            >\n              <StyledDeleteIcon />\n            </Button>\n          </EditTextElement>\n        </EditTextWrapper>\n      )}\n    </EditTextContainer>\n  );\n}\n\nexport default EditText;\n","import styled from 'styled-components';\n\nimport { BackgroundColorProps } from 'ts/interfaces';\n\nimport { IoClose } from 'react-icons/io5';\n\nconst TasksWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  &::-webkit-scrollbar {\n    width: 16px;\n    background-color: ${({ theme }) => theme.colors.backgroundWhite};\n  }\n\n  &::-webkit-scrollbar-track {\n    border-radius: 16px;\n    background-color: ${({ theme }) => theme.colors.backgroundWhite};\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: #babac0;\n    border-radius: 16px;\n    border: 4px solid ${({ theme }) => theme.colors.backgroundWhite};\n  }\n\n  &::-webkit-scrollbar-button {\n    display: none;\n  }\n`;\n\nconst StyledTask = styled.div<BackgroundColorProps>`\n  width: auto;\n  min-height: 100px;\n  max-height: 200px;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  border-radius: 10px;\n  background-color: ${({ $backgroundColor, theme }) =>\n    $backgroundColor ?? theme.colors.primaryColor};\n  transition: ${({ theme }) => theme.effects.transition};\n  cursor: grab;\n  gap: 5px;\n\n  &:active {\n    cursor: grabbing;\n  }\n`;\n\nconst TaskHeader = styled.div`\n  min-width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  transition: ${({ theme }) => theme.effects.transition};\n  gap: 20px;\n`;\n\nconst TaskButton = styled.button.attrs({\n  type: 'button',\n})`\n  background-color: ${({ theme }) => theme.colors.transparent};\n  border: none;\n  outline: none;\n  min-width: 25px;\n  transition: ${({ theme }) => theme.effects.transition};\n  cursor: pointer;\n\n  &:hover:enabled {\n    opacity: ${({ theme }) => theme.effects.hoverOpacity};\n  }\n\n  &:active:enabled {\n    opacity: ${({ theme }) => theme.effects.activeOpacity};\n  }\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst TaskTitle = styled.h3`\n  font-size: ${({ theme }) => theme.fontSizes.text};\n  font-family: ${({ theme }) => theme.fonts.title};\n  text-align: left;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  transition: ${({ theme }) => theme.effects.transition};\n\n  &:hover {\n    cursor: pointer;\n    color: ${({ theme }) => theme.colors.backgroundWhite};\n    text-decoration: underline;\n  }\n`;\n\nconst TaskDescriptionWrapper = styled.div`\n  display: flex;\n`;\n\nconst TaskDescription = styled.p`\n  font-size: ${({ theme }) => theme.fontSizes.smallText};\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  height: 20px;\n`;\n\nconst StyledRemoveIcon = styled(IoClose)`\n  color: ${({ theme }) => theme.colors.backgroundWhite};\n`;\n\nconst TaskResponsibleWrapper = styled.div`\n  font-size: ${({ theme }) => theme.fontSizes.smallNoteText};\n  word-break: break-word;\n  overflow: hidden;\n`;\n\nconst TaskResponsible = styled.p`\n  font-style: italic;\n  color: ${({ theme }) => theme.colors.grey};\n`;\n\nconst TaskResponsibleName = styled.span`\n  display: inline-block;\n  background-color: ${({ theme }) => theme.colors.backgroundWhite};\n  padding: 0 7px 0 5px;\n  border-radius: 3px;\n  color: ${({ theme }) => theme.colors.text};\n`;\n\nexport {\n  StyledTask,\n  TaskHeader,\n  TaskTitle,\n  TaskDescriptionWrapper,\n  TaskDescription,\n  TasksWrapper,\n  TaskButton,\n  StyledRemoveIcon,\n  TaskResponsibleWrapper,\n  TaskResponsible,\n  TaskResponsibleName,\n};\n","import { Draggable } from '@hello-pangea/dnd';\nimport React, { memo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Task } from 'ts/interfaces';\n\nimport {\n  StyledTask,\n  TaskHeader,\n  TaskTitle,\n  StyledRemoveIcon,\n  TaskDescription,\n  TaskButton,\n  TaskDescriptionWrapper,\n  TaskResponsibleWrapper,\n  TaskResponsible,\n  TaskResponsibleName,\n} from './TaskCard.style';\n\ninterface TasksCardProps {\n  task: Task;\n  taskIndex: number;\n  showEditPopupOnClick: (task: Task) => void;\n  showDeletePopupOnClick: (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    task: Task\n  ) => void;\n}\n\nfunction TaskCard({\n  task,\n  taskIndex,\n  showEditPopupOnClick,\n  showDeletePopupOnClick,\n}: TasksCardProps) {\n  const { t } = useTranslation('translation', { keyPrefix: 'task' });\n\n  return (\n    <Draggable draggableId={task._id} index={taskIndex}>\n      {(providedDrag) => (\n        <StyledTask\n          key={task._id}\n          $backgroundColor={task.color}\n          ref={providedDrag.innerRef}\n          {...providedDrag.draggableProps}\n          {...providedDrag.dragHandleProps}\n        >\n          <TaskHeader>\n            <TaskTitle onClick={() => showEditPopupOnClick(task)}>{task.title}</TaskTitle>\n            <TaskButton onClick={(event) => showDeletePopupOnClick(event, task)}>\n              <StyledRemoveIcon />\n            </TaskButton>\n          </TaskHeader>\n          <TaskDescriptionWrapper>\n            <TaskDescription>{task.description}</TaskDescription>\n          </TaskDescriptionWrapper>\n          {task.users[0] && (\n            <TaskResponsibleWrapper>\n              <TaskResponsible>\n                {t('responsible')}\n                <TaskResponsibleName> {task.users[0]} </TaskResponsibleName>\n              </TaskResponsible>\n            </TaskResponsibleWrapper>\n          )}\n        </StyledTask>\n      )}\n    </Draggable>\n  );\n}\n\nexport default memo(TaskCard);\n","import React, { memo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Draggable, Droppable } from '@hello-pangea/dnd';\n\nimport useGetAllTasks from 'hooks/useGetAllTasks';\n\nimport Button from 'components/Button/Button';\nimport EditText from 'components/EditText/EditText';\nimport TaskCard from 'components/TaskCard/TaskCard';\n\nimport { ColumnData, Task, TaskList } from 'ts/interfaces';\n\nimport defaultTheme from 'styles/theme';\nimport { ColumnContainer, TasksWrapper } from './Columns.style';\n\ninterface ColumnProps {\n  column: ColumnData;\n  columnIndex: number;\n  isSuccessGetColumnList: boolean;\n  isLoadingColumnList: boolean;\n  taskList: TaskList;\n  setTaskList: React.Dispatch<React.SetStateAction<TaskList>>;\n  showCreateTaskPopup: (column: ColumnData) => void;\n  editColumnTitle: (title: string, item: ColumnData) => void;\n  deleteColumnOnClick: (column: ColumnData) => void;\n  showEditPopupOnClick: (task: Task) => void;\n  showDeletePopupOnClick: (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    task: Task\n  ) => void;\n}\n\nfunction Column({\n  column,\n  columnIndex,\n  isSuccessGetColumnList,\n  isLoadingColumnList,\n  taskList,\n  setTaskList,\n  showCreateTaskPopup,\n  editColumnTitle,\n  deleteColumnOnClick,\n  showEditPopupOnClick,\n  showDeletePopupOnClick,\n}: ColumnProps) {\n  const { t } = useTranslation('translation', { keyPrefix: 'columnContainer' });\n  useGetAllTasks(column.boardId, column._id, setTaskList);\n\n  return (\n    <Draggable draggableId={column._id} index={columnIndex}>\n      {(providedDrag, snapshot) => (\n        <ColumnContainer\n          ref={providedDrag.innerRef}\n          {...providedDrag.draggableProps}\n          {...providedDrag.dragHandleProps}\n          $isDragging={snapshot.isDragging}\n          style={{\n            ...providedDrag.draggableProps.style,\n            cursor: 'default',\n          }}\n        >\n          <EditText\n            item={column}\n            isSuccess={isSuccessGetColumnList}\n            isLoading={isLoadingColumnList}\n            deleteItemOnClick={deleteColumnOnClick}\n            editText={editColumnTitle}\n          />\n          <Droppable droppableId={column._id} direction=\"vertical\" type=\"task\">\n            {(providedDrop) => (\n              <TasksWrapper ref={providedDrop.innerRef} {...providedDrop.droppableProps}>\n                {taskList[column._id] &&\n                  taskList[column._id].map((task, index) => (\n                    <TaskCard\n                      key={task._id}\n                      task={task}\n                      taskIndex={index}\n                      showEditPopupOnClick={showEditPopupOnClick}\n                      showDeletePopupOnClick={showDeletePopupOnClick}\n                    />\n                  ))}\n                {providedDrop.placeholder}\n              </TasksWrapper>\n            )}\n          </Droppable>\n          <Button\n            type=\"button\"\n            backgroundColor={defaultTheme.colors.transparent}\n            color={defaultTheme.colors.grey}\n            callback={() => showCreateTaskPopup(column)}\n          >\n            {`+ ${t('newTaskButton')}`}\n          </Button>\n        </ColumnContainer>\n      )}\n    </Draggable>\n  );\n}\n\nexport default memo(Column);\n","import React, { memo, useCallback, useState } from 'react';\nimport { DragDropContext, Droppable } from '@hello-pangea/dnd';\n\nimport { useAppDispatch, useAppSelector } from 'hooks/useRedux';\nimport useGetAllColumns from 'hooks/useGetAllColumns';\nimport useEditColumnTitle from 'hooks/useEditColumnTitle';\nimport useCreateTask from 'hooks/useCreateTask';\nimport useDeleteTask from 'hooks/useDeleteTask';\nimport useEditTask from 'hooks/useEditTask';\nimport useDragAndDrop from 'hooks/useDragAndDrop';\n\nimport { setDeleteColumnPopupOpen, setSelectedColumn } from 'redux/slices/columnSlice';\nimport {\n  setCreateTaskPopupOpen,\n  setDeleteTaskPopupOpen,\n  setEditTaskPopupOpen,\n  setSelectedTask,\n} from 'redux/slices/taskSlice';\nimport { getSelectedTask } from 'redux/selectors/taskSelectors';\n\nimport PopupWithForm from 'components/PopupWithForm/PopupWithForm';\nimport Loader from 'components/Loader/Loader';\nimport PopupWarning from 'components/PopupWarning/PopupWarning';\n\nimport { ColumnData, TaskList } from 'ts/interfaces';\n\nimport { ColumnWrapper } from './Columns.style';\n\nimport Column from './Column';\n\nfunction Columns() {\n  const selectedTask = useAppSelector(getSelectedTask);\n  const [taskList, setTaskList] = useState<TaskList>({});\n  const dispatch = useAppDispatch();\n  const { columnList, isSuccessGetColumnList, isLoadingColumnList, setColumnList } =\n    useGetAllColumns();\n  const { editColumnTitle } = useEditColumnTitle();\n  const {\n    isCreateTaskPopupOpen,\n    isLoadingCreateTask,\n    createTaskOnSubmit,\n    showCreateTaskPopup,\n  } = useCreateTask(taskList);\n  const {\n    isEditTaskPopupOpen,\n    isLoadingEditTask,\n    editTaskOnSubmit,\n    showEditPopupOnClick,\n  } = useEditTask(selectedTask);\n  const {\n    isDeleteTaskPopupOpen,\n    isLoadingDeleteTask,\n    deleteTask,\n    showDeletePopupOnClick,\n  } = useDeleteTask(selectedTask);\n  const isLoadingColumns = [\n    isLoadingColumnList,\n    isLoadingCreateTask,\n    isLoadingEditTask,\n    isLoadingDeleteTask,\n  ].some((loader) => loader);\n  const { onDragEnd } = useDragAndDrop(columnList, setColumnList, taskList, setTaskList);\n\n  const deleteColumnOnClick = useCallback((column: ColumnData) => {\n    dispatch(setSelectedColumn(column));\n    dispatch(setDeleteColumnPopupOpen(true));\n  }, []);\n\n  return (\n    <>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"columnList\" direction=\"horizontal\" type=\"column\">\n          {(providedDrop) => (\n            <ColumnWrapper ref={providedDrop.innerRef} {...providedDrop.droppableProps}>\n              {columnList.map((column, index) => (\n                <Column\n                  key={column._id}\n                  column={column}\n                  columnIndex={index}\n                  isSuccessGetColumnList={isSuccessGetColumnList}\n                  isLoadingColumnList={isLoadingColumnList}\n                  taskList={taskList}\n                  setTaskList={setTaskList}\n                  deleteColumnOnClick={deleteColumnOnClick}\n                  editColumnTitle={editColumnTitle}\n                  showEditPopupOnClick={showEditPopupOnClick}\n                  showDeletePopupOnClick={showDeletePopupOnClick}\n                  showCreateTaskPopup={showCreateTaskPopup}\n                />\n              ))}\n              {providedDrop.placeholder}\n            </ColumnWrapper>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <PopupWithForm\n        isPopupShown={isCreateTaskPopupOpen}\n        setPopupShown={setCreateTaskPopupOpen}\n        formTitleText=\"newTaskTitle\"\n        keyPrefix=\"editTaskForm\"\n        onSubmit={createTaskOnSubmit}\n        maxDescriptionLength={200}\n      />\n      <PopupWithForm\n        isPopupShown={isEditTaskPopupOpen}\n        setPopupShown={setEditTaskPopupOpen}\n        selectedItem={selectedTask}\n        setSelectedItem={setSelectedTask}\n        formTitleText=\"editTitle\"\n        keyPrefix=\"editTaskForm\"\n        onSubmit={editTaskOnSubmit}\n        maxDescriptionLength={200}\n      />\n      <PopupWarning\n        isPopupShown={isDeleteTaskPopupOpen}\n        setPopupShown={setDeleteTaskPopupOpen}\n        text=\"deleteTask\"\n        actionOnYes={deleteTask}\n      />\n      {isLoadingColumns && <Loader />}\n    </>\n  );\n}\n\nexport default memo(Columns);\n","import React, { memo, useEffect } from 'react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from 'components/Button/Button';\nimport Input from 'components/Input/Input';\n\nimport { defaultColumnFormValues } from 'utils/constants';\n\nimport { ColumnFormValues } from 'ts/interfaces';\n\nimport { Form } from 'styles/styles';\n\ninterface EditFormProps<T> {\n  keyPrefix: string;\n  onSubmit: SubmitHandler<ColumnFormValues>;\n  selectedItem?: T | null;\n}\n\nfunction EditForm<T>({ keyPrefix, onSubmit, selectedItem }: EditFormProps<T>) {\n  const { t } = useTranslation('translation');\n\n  const {\n    register,\n    handleSubmit,\n    clearErrors,\n    setFocus,\n    formState: { errors },\n  } = useForm<ColumnFormValues>({\n    mode: 'onSubmit',\n    reValidateMode: 'onSubmit',\n    defaultValues: selectedItem ?? defaultColumnFormValues,\n  });\n\n  useEffect(() => {\n    setFocus('title');\n  }, []);\n\n  return (\n    <Form\n      aria-label=\"form\"\n      noValidate\n      autoComplete=\"off\"\n      onSubmit={handleSubmit(onSubmit)}\n    >\n      <Input\n        type=\"text\"\n        name=\"title\"\n        register={register}\n        clearErrors={clearErrors}\n        errors={errors.title}\n        placeholderText={t(`${keyPrefix}.title`)}\n        minLength={{\n          value: 3,\n          message: t('editForm.titleMinLength'),\n        }}\n        maxLength={{\n          value: 25,\n          message: t('editForm.titleMaxLength'),\n        }}\n        required={t('editForm.required')}\n      />\n      <Button type=\"submit\" disabled={!!errors.title?.message}>\n        {t('editForm.button')}\n      </Button>\n    </Form>\n  );\n}\n\nEditForm.defaultProps = {\n  selectedItem: null,\n};\n\nexport default memo(EditForm);\n","import { motion } from 'framer-motion';\nimport styled from 'styled-components';\n\nimport { VariantsProps } from 'ts/interfaces';\n\nconst PopupWrapper = styled(motion.div).attrs<VariantsProps>(({ $variants }) => ({\n  initial: 'initial',\n  animate: 'animate',\n  exit: 'exit',\n  variants: $variants,\n}))<VariantsProps>`\n  position: fixed;\n  display: flex;\n  z-index: 15;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Background = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 15;\n  backdrop-filter: blur(2px);\n`;\n\nconst Popup = styled.div`\n  max-width: 500px;\n  width: 100%;\n  background-color: ${({ theme }) => theme.colors.backgroundBlue};\n  padding: 25px;\n  margin: -10% 10px 0;\n  border-radius: 7px;\n  z-index: 3;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  position: relative;\n  z-index: 20;\n`;\n\nconst PopupTitle = styled.h3`\n  font-family: ${({ theme }) => theme.fonts.title};\n  font-weight: ${({ theme }) => theme.fontsWeight.medium};\n  font-size: ${({ theme }) => theme.fontSizes.h4};\n  color: ${({ theme }) => theme.colors.title};\n  align-self: flex-start;\n  padding: 10px 20px;\n`;\n\nconst CloseButtonWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  svg {\n    color: ${({ theme }) => theme.colors.primaryColor};\n  }\n`;\n\nexport { PopupWrapper, Background, Popup, PopupTitle, CloseButtonWrapper };\n","import React, { useCallback } from 'react';\nimport { AnimatePresence } from 'framer-motion';\nimport { ActionCreatorWithPayload } from '@reduxjs/toolkit/dist/createAction';\nimport { useTranslation } from 'react-i18next';\nimport { SubmitHandler } from 'react-hook-form';\n\nimport { useAppDispatch } from 'hooks/useRedux';\n\nimport { popupAnimation } from 'utils/animations';\n\nimport { ColumnFormValues } from 'ts/interfaces';\n\nimport defaultTheme from 'styles/theme';\n\nimport { MdClose } from 'react-icons/md';\n\nimport Button from 'components/Button/Button';\nimport EditFormColumn from './EditFormColumn/EditFormColumn';\n\nimport {\n  Background,\n  Popup,\n  PopupTitle,\n  CloseButtonWrapper,\n  PopupWrapper,\n} from './PopupWithFormColumn.style';\n\ninterface PopupWithFormProps {\n  isPopupShown: boolean;\n  setPopupShown: ActionCreatorWithPayload<boolean>;\n  keyPrefix: string;\n  title: string;\n  onSubmit: SubmitHandler<ColumnFormValues>;\n}\n\nfunction PopupWithFormColumnTask({\n  isPopupShown,\n  setPopupShown,\n  keyPrefix,\n  title,\n  onSubmit,\n}: PopupWithFormProps) {\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation('translation', { keyPrefix });\n\n  const closePopup = useCallback(() => {\n    dispatch(setPopupShown(false));\n  }, []);\n\n  return (\n    <AnimatePresence>\n      {isPopupShown && (\n        <PopupWrapper $variants={popupAnimation}>\n          <Background onClick={closePopup} />\n          <Popup>\n            <PopupTitle>{t(`${title}`)}</PopupTitle>\n            <EditFormColumn keyPrefix={keyPrefix} onSubmit={onSubmit} />\n            <CloseButtonWrapper>\n              <Button\n                type=\"button\"\n                width=\"30px\"\n                backgroundColor={defaultTheme.colors.transparent}\n                callback={closePopup}\n              >\n                <MdClose />\n              </Button>\n            </CloseButtonWrapper>\n          </Popup>\n        </PopupWrapper>\n      )}\n    </AnimatePresence>\n  );\n}\n\nexport default PopupWithFormColumnTask;\n","import styled from 'styled-components';\n\nconst ProjectControls = styled.section`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  margin-bottom: 15px;\n  gap: 50px;\n\n  Button {\n    margin-top: 6px;\n  }\n\n  @media (max-width: 530px) {\n    gap: 10px;\n  }\n`;\n\nconst ProjectControlsWrapper = styled.div`\n  display: flex;\n  gap: 10px;\n  overflow-x: hidden;\n\n  Button {\n    padding: 0;\n\n    &:nth-child(3) {\n      svg {\n        width: 100%;\n        height: 100%;\n      }\n    }\n  }\n`;\n\nconst ProjectTitle = styled.h1`\n  font-family: ${({ theme }) => theme.fonts.title};\n  font-weight: ${({ theme }) => theme.fontsWeight.medium};\n  font-size: ${({ theme }) => theme.fontSizes.h3};\n  color: ${({ theme }) => theme.colors.title};\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  @media (max-width: 600px) {\n    font-size: ${({ theme }) => theme.fontSizes.h3};\n  }\n`;\n\nconst ProjectButtonWrapper = styled.div`\n  display: flex;\n`;\n\nconst ProjectDescription = styled.p`\n  align-self: flex-start;\n  margin-bottom: 15px;\n  word-break: break-all;\n`;\n\nconst ProjectContainer = styled.section`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  width: 100%;\n  height: 100%;\n  overflow-y: none;\n  background-color: ${({ theme }) => theme.colors.backgroundGrey};\n  border-radius: 10px;\n\n  @media (max-width: 800px) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport {\n  ProjectControls,\n  ProjectControlsWrapper,\n  ProjectTitle,\n  ProjectDescription,\n  ProjectContainer,\n  ProjectButtonWrapper,\n};\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Navigate, useLocation } from 'react-router-dom';\n\nimport { useAppDispatch, useAppSelector } from 'hooks/useRedux';\nimport useDeleteProject from 'hooks/useDeleteProject';\nimport useGetProjectById from 'hooks/useGetProjectById';\nimport useCreateColumn from 'hooks/useCreateColumn';\nimport useDeleteColumn from 'hooks/useDeleteColumn';\nimport useGetAllColumns from 'hooks/useGetAllColumns';\nimport useEditColumnTitle from 'hooks/useEditColumnTitle';\n\nimport { setDeleteProjectPopupOpen } from 'redux/slices/projectSlice';\nimport {\n  setCreateColumnPopupOpen,\n  setDeleteColumnPopupOpen,\n} from 'redux/slices/columnSlice';\nimport { getLoadingTasksList } from 'redux/selectors/taskSelectors';\n\nimport { backButtonAnimation } from 'utils/animations';\n\nimport PopupWarning from 'components/PopupWarning/PopupWarning';\nimport NoResultsContainer from 'components/NoResultsContainer/NoResultsContainer';\nimport Loader from 'components/Loader/Loader';\nimport Button from 'components/Button/Button';\nimport Columns from 'components/Columns/Columns';\nimport PopupWithFormColumnTask from 'components/PopupWithFormColumn/PopupWithFormColumn';\n\nimport defaultTheme from 'styles/theme';\nimport { MainWrapper, StyledPrevIcon, StyledDeleteIcon } from 'styles/styles';\nimport {\n  ProjectButtonWrapper,\n  ProjectContainer,\n  ProjectControls,\n  ProjectControlsWrapper,\n  ProjectDescription,\n  ProjectTitle,\n} from './ProjectPage.style';\n\ninterface ProjectPageProps {\n  setFooterShown: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction ProjectPage({ setFooterShown }: ProjectPageProps) {\n  const isLoadingGetAllTasks = useAppSelector(getLoadingTasksList);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation('translation', { keyPrefix: 'projectPage' });\n  const { selectedProject, isLoadingSelectedProject, isNavigate } = useGetProjectById();\n  const { columnList, isLoadingColumnList } = useGetAllColumns();\n  const { isLoadingDeleteProject, isDeleteProjectPopupOpen, deleteProject, navigate } =\n    useDeleteProject(selectedProject);\n  const { isCreateColumnPopupOpen, isLoadingCreateColumn, onSubmit, id } =\n    useCreateColumn(columnList);\n  const { isLoadingDeleteColumn, isDeleteColumnPopupOpen, deleteColumn } =\n    useDeleteColumn();\n  const { isLoadingEditColumnTitle } = useEditColumnTitle();\n  const isLoadingProjectPage = [\n    isLoadingSelectedProject,\n    isLoadingColumnList,\n    isLoadingDeleteProject,\n    isLoadingDeleteColumn,\n    isLoadingCreateColumn,\n    isLoadingEditColumnTitle,\n    isLoadingGetAllTasks,\n  ].some((loader) => loader);\n\n  const [buttonText, setButtonText] = useState(`${t('newColumnButton')}`);\n  const [buttonWidth, setButtonWidth] = useState('130px');\n  const location = useLocation();\n  const ref = useRef<HTMLElement | null>(null);\n\n  const changeProjectPageLayout = () => {\n    if (ref.current && ref.current.offsetWidth <= 800) {\n      setButtonText('+');\n      setButtonWidth('30px');\n      if (location.pathname === `/projects/${id}`) {\n        setFooterShown(false);\n      }\n    } else {\n      setButtonText(`${t('newColumnButton')}`);\n      setButtonWidth('130px');\n      setFooterShown(true);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', changeProjectPageLayout);\n    changeProjectPageLayout();\n    return () => {\n      window.removeEventListener('resize', changeProjectPageLayout);\n      setFooterShown(true);\n    };\n  }, []);\n\n  return (\n    <MainWrapper ref={ref}>\n      <ProjectControls>\n        <ProjectControlsWrapper>\n          <Button\n            type=\"button\"\n            width=\"30px\"\n            animation={backButtonAnimation}\n            backgroundColor={defaultTheme.colors.transparent}\n            color={defaultTheme.colors.primaryColor}\n            callback={() => navigate(-1)}\n          >\n            <StyledPrevIcon $isDisabled={isLoadingSelectedProject} />\n          </Button>\n          <ProjectTitle>{selectedProject?.title}</ProjectTitle>\n          {selectedProject && (\n            <Button\n              type=\"button\"\n              width=\"30px\"\n              backgroundColor={defaultTheme.colors.transparent}\n              color={defaultTheme.colors.pink}\n              callback={() => dispatch(setDeleteProjectPopupOpen(true))}\n            >\n              <StyledDeleteIcon />\n            </Button>\n          )}\n        </ProjectControlsWrapper>\n        <ProjectButtonWrapper>\n          <Button\n            type=\"button\"\n            width={buttonWidth}\n            backgroundColor={defaultTheme.colors.transparent}\n            color={defaultTheme.colors.primaryColor}\n            callback={() => dispatch(setCreateColumnPopupOpen(true))}\n          >\n            {buttonText}\n          </Button>\n        </ProjectButtonWrapper>\n      </ProjectControls>\n      <ProjectDescription>{selectedProject?.description}</ProjectDescription>\n      <ProjectContainer>\n        {columnList?.length ? (\n          <Columns />\n        ) : (\n          <NoResultsContainer\n            text=\"projectPage.emptyContainerText\"\n            buttonText=\"projectPage.emptyContainerButton\"\n            setPopupShown={setCreateColumnPopupOpen}\n          />\n        )}\n      </ProjectContainer>\n      <PopupWarning\n        isPopupShown={isDeleteProjectPopupOpen}\n        setPopupShown={setDeleteProjectPopupOpen}\n        text=\"deleteProject\"\n        actionOnYes={deleteProject}\n      />\n      <PopupWarning\n        isPopupShown={isDeleteColumnPopupOpen}\n        setPopupShown={setDeleteColumnPopupOpen}\n        text=\"deleteColumn\"\n        actionOnYes={deleteColumn}\n      />\n      <PopupWithFormColumnTask\n        isPopupShown={isCreateColumnPopupOpen}\n        setPopupShown={setCreateColumnPopupOpen}\n        keyPrefix=\"editColumnForm\"\n        title=\"newColumnTitle\"\n        onSubmit={onSubmit}\n      />\n      {isLoadingProjectPage && <Loader />}\n      {isNavigate && <Navigate to=\"/\" />}\n    </MainWrapper>\n  );\n}\n\nexport default memo(ProjectPage);\n"],"names":["isLoggedIn","useAppSelector","getLoggedIn","id","useParams","useGetProjectByIdQuery","skip","selectedProject","data","isLoadingSelectedProject","isFetching","isSuccessSelectedProject","isSuccess","isErrorSelectedProject","isError","isUninitialized","isNavigate","columnsApiSlice","apiSlice","endpoints","builder","getAllColumns","query","addFetchOptions","Endpoints","Methods","onQueryStarted","_","dispatch","queryFulfilled","getState","isCreateColumnPopupOpen","column","setCreateColumnPopupOpen","Error","transformResponse","columns","sort","a","b","order","providesTags","result","map","type","_id","createColumn","mutation","body","invalidatesTags","deleteColumnById","boardId","updateColumnById","updateOrderColumn","getColumnById","useGetAllColumnsQuery","useCreateColumnMutation","useDeleteColumnByIdMutation","useUpdateColumnByIdMutation","useUpdateOrderColumnMutation","useGetColumnByIdQuery","getBaseColumnState","state","getSelectedColumn","createSelector","selectedColumn","getDeleteColumnPopupOpen","isDeleteColumnPopupOpen","getCreateColumnPopupOpen","select","useAppDispatch","isLoadingCreateColumn","isLoading","isSuccessCreateColumn","onSubmit","useCallback","formValues","length","useEffect","isLoadingDeleteColumn","deleteColumn","setDeleteColumnPopupOpen","setSelectedColumn","useState","columnList","setColumnList","isLoadingColumnList","isSuccessGetColumnList","isLoadingEditColumnTitle","editColumnTitle","title","tasksApiSlice","getAllTasks","columnId","tasks","JSON","parse","description","setLoadingGetAllTasks","task","isEditTaskPopupOpen","isCreateTaskPopupOpen","setCreateTaskPopupOpen","setEditTaskPopupOpen","createTask","updateTask","updateOrderTask","deleteTask","useGetAllTasksQuery","useCreateTaskMutation","useUpdateTaskMutation","useUpdateOrderTaskMutation","useDeleteTaskMutation","getBaseTaskState","getSelectedTask","selectedTask","getCreateTaskPopupOpen","getDeleteTaskPopupOpen","isDeleteTaskPopupOpen","getEditTaskPopupOpen","getLoadingTasksList","isLoadingGetAllTasks","taskList","authUser","getAuthUser","isLoadingCreateTask","showCreateTaskPopup","createTaskOnSubmit","stringify","userId","users","responsibleUser","setSelectedTask","deleteTaskById","isLoadingDeleteTask","showDeletePopupOnClick","event","stopPropagation","setDeleteTaskPopupOpen","editTask","isLoadingEditTask","showEditPopupOnClick","editTaskOnSubmit","color","setTaskList","onDragEnd","destination","source","droppableId","index","splice","reorderedColumn","sourceTasks","destinationTasks","reorderedTask","prev","item","copiedSourceTasks","reorderTask","ColumnWrapper","styled","theme","colors","backgroundGrey","backgroundWhite","ColumnContainer","$isDragging","primaryColor","grey","TasksWrapper","fontSizes","h5","fonts","isSuccessGetAllTasks","EditTextElement","StyledEditText","text","fontsWeight","bold","Form","InputErrorText","EditTextContainer","TextWrapper","StyledButton","EditTextWrapper","EditTextForm","toggleEditingTextOnClick","editText","useTranslation","t","i18n","useForm","mode","reValidateMode","defaultValues","register","handleSubmit","clearErrors","trigger","setFocus","errors","formState","language","noValidate","autoComplete","Input","name","minLength","value","message","maxLength","required","Button","width","backgroundColor","defaultTheme","callback","memo","deleteItemOnClick","isEditingText","setEditingText","onClick","StyledTask","$backgroundColor","effects","transition","TaskHeader","TaskButton","transparent","hoverOpacity","activeOpacity","TaskTitle","TaskDescriptionWrapper","TaskDescription","smallText","StyledRemoveIcon","IoClose","TaskResponsibleWrapper","smallNoteText","TaskResponsible","TaskResponsibleName","TaskCard","taskIndex","keyPrefix","draggableId","providedDrag","ref","innerRef","draggableProps","dragHandleProps","Column","columnIndex","deleteColumnOnClick","useGetAllTasks","snapshot","isDragging","style","cursor","direction","providedDrop","droppableProps","placeholder","Columns","useGetAllColumns","useEditColumnTitle","useCreateTask","useEditTask","useDeleteTask","isLoadingColumns","some","loader","useDragAndDrop","PopupWithForm","isPopupShown","setPopupShown","formTitleText","maxDescriptionLength","selectedItem","setSelectedItem","PopupWarning","actionOnYes","Loader","EditForm","defaultColumnFormValues","placeholderText","disabled","defaultProps","PopupWrapper","motion","attrs","initial","animate","exit","variants","$variants","Background","Popup","backgroundBlue","PopupTitle","medium","h4","CloseButtonWrapper","closePopup","AnimatePresence","popupAnimation","EditFormColumn","ProjectControls","ProjectControlsWrapper","ProjectTitle","h3","ProjectButtonWrapper","ProjectDescription","ProjectContainer","ProjectPage","setFooterShown","useGetProjectById","useDeleteProject","isLoadingDeleteProject","isDeleteProjectPopupOpen","deleteProject","navigate","useCreateColumn","useDeleteColumn","isLoadingProjectPage","buttonText","setButtonText","buttonWidth","setButtonWidth","location","useLocation","useRef","changeProjectPageLayout","current","offsetWidth","pathname","window","addEventListener","removeEventListener","animation","backButtonAnimation","$isDisabled","setDeleteProjectPopupOpen","NoResultsContainer","PopupWithFormColumn","to"],"sourceRoot":""}